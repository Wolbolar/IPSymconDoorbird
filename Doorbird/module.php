<?php

declare(strict_types=1);

require_once __DIR__ . '/../libs/ProfileHelper.php';
require_once __DIR__ . '/../libs/ConstHelper.php';

// Modul für Doorbird

class Doorbird extends IPSModule
{
    use ProfileHelper;

    private const D101 = 1; // D101
    private const D202 = 2; // D202
    private const D2101V = 3; // D2101V
    private const D2102V = 4; // D2102V
    private const D2103V = 5; // D2103V
    private const D21DKV = 6; // D21DKV
    private const D21DKH = 7; // D21DKH
    private const D101S = 8; // D101S
    private const D2101KV = 9; // D2101KV
    private const D21FPBI = 10; // D21FPBI
    private const D1101UV = 11; // D1101UV
    private const D2101FV = 12; // D2101FV
    private const D1101V = 13; // D1101V
    private const D1102V = 14; // D1102V
    private const D1101KH = 15; // D1101KH
    private const D2104V = 17; // D2104V
    private const D2105V = 18; // D2105V
    private const D2106V = 19; // D2106V
    private const D2102KV = 20; // D2102KV
    private const D2102FV = 21; // D2102FV
    private const D2101KH = 22; // D2101KH
    private const D2101IKH = 23; // D2101IKH
    private const D2101FPBI = 24; // D21D1FPBI
    private const D2101FPBK = 25; // D2101FPBK
    private const D2101FV_EKEY = 26; // D2101FV EKEY
    private const D2102FV_EKEY = 27; // D2102FV EKEY

    private const D2100E = 28; // D2100E
    private const D1100E = 29; // D1100E




    private const GET_FAVORITES = '/bha-api/favorites.cgi'; // Get Favorites URL
    private const SET_HTTP_FAVORITE = '/bha-api/favorites.cgi?action=save&type=http&title='; // Set HTTP Favorites URL
    private const SET_SIP_FAVORITE = '/bha-api/favorites.cgi?action=save&type=sip&title='; // Set SIP Favorites URL
    private const DELETE_FAVORITE = '/bha-api/favorites.cgi?action=remove&type='; // Delete Fovorites URL
    private const GET_INFO = '/bha-api/info.cgi'; // Get Info
    private const GET_HISTORY = '/bha-api/history.cgi?index='; // Get History
    private const GET_SCHEDULE = '/bha-api/schedule.cgi'; // Get Schedule
    private const LIGHT = '/bha-api/light-on.cgi'; // Light
    private const GET_IMAGE = '/bha-api/image.cgi'; // Get Image
    private const OPEN_DOOR = '/bha-api/open-door.cgi'; // Open Door
    private const LIVE_VIDEO_REQUEST = '/bha-api/video.cgi'; // Live Video Request
    private const PICTURE_LOGO_DOORBIRD = '';

    // helper properties
    private int $position = 0;

    public function Create()
    {
        //Never delete this line!
        parent::Create();

        //These lines are parsed on Symcon Startup or Instance creation
        //You cannot use variables here. Just static values.
        $this->RequireParent('{82347F20-F541-41E1-AC5B-A636FD3AE2D8}');

        $this->RegisterPropertyString('name', '');
        $this->RegisterPropertyString('Host', '');
        $this->RegisterPropertyInteger('PortDoorbell', 80);
        $this->RegisterPropertyString('hostname', '');
        $this->RegisterPropertyString('IPSIP', '');
        $this->RegisterPropertyInteger('PortIPS', 3777);
        $this->RegisterPropertyString('User', '');
        $this->RegisterPropertyString('Password', '');
        $this->RegisterPropertyString('User_1', '');
        $this->RegisterPropertyString('Password_1', '');
        $this->RegisterPropertyInteger('picturelimitring', 20);
        $this->RegisterPropertyInteger('picturelimitsnapshot', 20);
        $this->RegisterPropertyBoolean('doorbell', true);
        $this->RegisterPropertyInteger('relaxationdoorbell', 10);
        $this->RegisterPropertyBoolean('motionsensor', true);
        $this->RegisterPropertyInteger('relaxationmotionsensor', 10);
        $this->RegisterPropertyBoolean('dooropen', true);
        $this->RegisterPropertyInteger('relaxationdooropen', 10);
        $this->RegisterPropertyBoolean('activeemail', false);
        $this->RegisterPropertyString('email', '');
        $this->RegisterPropertyInteger('smtpmodule', 0);
        $this->RegisterPropertyString('subject', 'Doorbell Klingel!');
        $this->RegisterPropertyString('emailtext', 'Da hat jemand an der Tür geklingelt, aber du bist leider nicht da!');
        $this->RegisterPropertyBoolean('activeemail2', false);
        $this->RegisterPropertyString('email2', '');
        $this->RegisterPropertyInteger('smtpmodule2', 0);
        $this->RegisterPropertyString('subject2', 'Doorbell Klingel!');
        $this->RegisterPropertyString('emailtext2', 'Da hat jemand an der Tür geklingelt, aber du bist leider nicht da!');
        $this->RegisterPropertyBoolean('activeemail3', false);
        $this->RegisterPropertyString('email3', '');
        $this->RegisterPropertyInteger('smtpmodule3', 0);
        $this->RegisterPropertyString('subject3', 'Doorbell Klingel!');
        $this->RegisterPropertyString('emailtext3', 'Da hat jemand an der Tür geklingelt, aber du bist leider nicht da!');
        $this->RegisterPropertyBoolean('activeemail4', false);
        $this->RegisterPropertyString('email4', '');
        $this->RegisterPropertyInteger('smtpmodule4', 0);
        $this->RegisterPropertyString('subject4', 'Doorbell Klingel!');
        $this->RegisterPropertyString('emailtext4', 'Da hat jemand an der Tür geklingelt, aber du bist leider nicht da!');
        $this->RegisterPropertyBoolean('activeemail5', false);
        $this->RegisterPropertyString('email5', '');
        $this->RegisterPropertyInteger('smtpmodule5', 0);
        $this->RegisterPropertyString('subject5', 'Doorbell Klingel!');
        $this->RegisterPropertyString('emailtext5', 'Da hat jemand an der Tür geklingelt, aber du bist leider nicht da!');
        $this->RegisterPropertyBoolean('activeemail6', false);
        $this->RegisterPropertyString('email6', '');
        $this->RegisterPropertyInteger('smtpmodule6', 0);
        $this->RegisterPropertyString('subject6', 'Doorbell Klingel!');
        $this->RegisterPropertyString('emailtext6', 'Da hat jemand an der Tür geklingelt, aber du bist leider nicht da!');
        $this->RegisterPropertyBoolean('activeemail7', false);
        $this->RegisterPropertyString('email7', '');
        $this->RegisterPropertyInteger('smtpmodule7', 0);
        $this->RegisterPropertyString('subject7', 'Doorbell Klingel!');
        $this->RegisterPropertyString('emailtext7', 'Da hat jemand an der Tür geklingelt, aber du bist leider nicht da!');
        $this->RegisterPropertyBoolean('activeemail8', false);
        $this->RegisterPropertyString('email8', '');
        $this->RegisterPropertyInteger('smtpmodule8', 0);
        $this->RegisterPropertyString('subject8', 'Doorbell Klingel!');
        $this->RegisterPropertyString('emailtext8', 'Da hat jemand an der Tür geklingelt, aber du bist leider nicht da!');
        $this->RegisterPropertyBoolean('activeemail9', false);
        $this->RegisterPropertyString('email9', '');
        $this->RegisterPropertyInteger('smtpmodule9', 0);
        $this->RegisterPropertyString('subject9', 'Doorbell Klingel!');
        $this->RegisterPropertyString('emailtext9', 'Da hat jemand an der Tür geklingelt, aber du bist leider nicht da!');
        $this->RegisterPropertyBoolean('activeemail10', false);
        $this->RegisterPropertyString('email10', '');
        $this->RegisterPropertyInteger('smtpmodule10', 0);
        $this->RegisterPropertyString('subject10', 'Doorbell Klingel!');
        $this->RegisterPropertyString('emailtext10', 'Da hat jemand an der Tür geklingelt, aber du bist leider nicht da!');
        $this->RegisterPropertyBoolean('activeemail11', false);
        $this->RegisterPropertyString('email11', '');
        $this->RegisterPropertyInteger('smtpmodule11', 0);
        $this->RegisterPropertyString('subject11', 'Doorbell Klingel!');
        $this->RegisterPropertyString('emailtext11', 'Da hat jemand an der Tür geklingelt, aber du bist leider nicht da!');
        $this->RegisterPropertyBoolean('altview', false);
        $this->RegisterPropertyString('webhookusername', 'ipsymcon');
        $this->RegisterPropertyString('webhookpassword', 'useripsh0me');
        $this->RegisterPropertyInteger('categoryhistory', 0);
        $this->RegisterPropertyInteger('categorysnapshot', 0);
        $this->RegisterPropertyInteger('model', 0);
        $this->RegisterAttributeString('schedule', '[]');
        $this->RegisterPropertyString('list_favorites', '[]');
        $this->RegisterPropertyString('list_sip', '[]');
        $this->RegisterPropertyString('list_schedule', '[]');
        $this->RegisterPropertyBoolean('doorbird_app', false);
        $this->RegisterPropertyBoolean('slideshow_history', false);
        $this->RegisterPropertyBoolean('slideshow_snapshot', false);
        $this->RegisterPropertyBoolean('webadmin', false);
        $this->RegisterPropertyBoolean('counter', true);
        $this->RegisterPropertyBoolean('autoplay', false);
        $this->RegisterPropertyBoolean('ken_burns', false);
        $this->RegisterPropertyInteger('iframe_width_video', 960);
        $this->RegisterPropertyInteger('iframe_height_video', 540);
        $this->RegisterPropertyInteger('iframe_width_snapshot', 640);
        $this->RegisterPropertyInteger('iframe_height_snapshot', 480);
        $this->RegisterPropertyInteger('iframe_width_history', 640);
        $this->RegisterPropertyInteger('iframe_height_history', 480);
        $this->RegisterPropertyInteger('iframe_width_webadmin', 960);
        $this->RegisterPropertyInteger('iframe_height_webadmin', 540);
        $this->RegisterAttributeInteger('pictures_history', 0);
        $this->RegisterAttributeInteger('pictures_history2', 0);
        $this->RegisterAttributeInteger('pictures_history3', 0);
        $this->RegisterAttributeBoolean('pictures_debug', true);

        //we will wait until the kernel is ready
        $this->RegisterMessage(0, IPS_KERNELMESSAGE);
    }

    public function ApplyChanges()
    {
        //Never delete this line!
        parent::ApplyChanges();

        if (IPS_GetKernelRunlevel() !== KR_READY) {
            return;
        }
        $this->SetupVariables();
    }

    public function PictureDebug(bool $debug)
    {
        $this->WriteAttributeBoolean('pictures_debug', $debug);
    }

    public function GetConfigurationForParent()
    {
        // $Config['Host'] = $this->GetHostIP();
        $Config['Port'] = 6524;
        $Config['BindPort'] = 6524;
        return json_encode($Config);
    }

    public function MessageSink($TimeStamp, $SenderID, $Message, $Data)
    {
        $this->LogMessage('SenderID: ' . $SenderID . ', Message: ' . $Message . ', Data:' . json_encode($Data), KL_DEBUG);
        if ($Message == IM_CHANGESTATUS) {
            if ($Data[0] === IS_ACTIVE) {
                $this->SetupVariables();
            }
        } elseif ($Message == IPS_KERNELMESSAGE) {
            if ($Data[0] === KR_READY) {
                $this->SetupVariables();
            }
        } else {
            if ($SenderID == $this->GetIDForIdent('LastRingtone')) {
                $this->SetRingPicture(1);
                $email = $this->ReadPropertyString('email');
                $this->EmailAlert($email, 1);
                $this->SendDebug('Doorbird recieved LastRingtone at', date('H:i', time()), 0);
                $this->SendDebug(
                    'Doorbird', 'Message from SenderID ' . $SenderID . ' with Message ' . $Message . '\r\n Data: ' . print_r($Data, true), 0
                );
            }
            $model = $this->ReadPropertyInteger('model');
            if ($model == self::D2102V || $model == self::D2103V) {
                if ($SenderID == $this->GetIDForIdent('LastRingtone2')) {
                    $this->SetRingPicture(2);
                    $email = $this->ReadPropertyString('email');
                    $this->EmailAlert($email, 2);
                    $this->SendDebug('Doorbird recieved LastRingtone2 at', date('H:i', time()), 0);
                    $this->SendDebug(
                        'Doorbird', 'Message from SenderID ' . $SenderID . ' with Message ' . $Message . '\r\n Data: ' . print_r($Data, true), 0
                    );
                }
            }
            if ($model == self::D2103V) {
                if ($SenderID == $this->GetIDForIdent('LastRingtone3')) {
                    $this->SetRingPicture(3);
                    $email = $this->ReadPropertyString('email');
                    $this->EmailAlert($email, 3);
                    $this->SendDebug('Doorbird recieved LastRingtone3 at', date('H:i', time()), 0);
                    $this->SendDebug(
                        'Doorbird', 'Message from SenderID ' . $SenderID . ' with Message ' . $Message . '\r\n Data: ' . print_r($Data, true), 0
                    );
                }
            }
            if ($model == self::D2104V) {
                if ($SenderID == $this->GetIDForIdent('LastRingtone4')) {
                    $this->SetRingPicture(4);
                    $email = $this->ReadPropertyString('email');
                    $this->EmailAlert($email, 4);
                    $this->SendDebug('Doorbird recieved LastRingtone4 at', date('H:i', time()), 0);
                    $this->SendDebug(
                        'Doorbird', 'Message from SenderID ' . $SenderID . ' with Message ' . $Message . '\r\n Data: ' . print_r($Data, true), 0
                    );
                }
            }
            if ($model == self::D2105V) {
                if ($SenderID == $this->GetIDForIdent('LastRingtone5')) {
                    $this->SetRingPicture(5);
                    $email = $this->ReadPropertyString('email');
                    $this->EmailAlert($email, 5);
                    $this->SendDebug('Doorbird recieved LastRingtone5 at', date('H:i', time()), 0);
                    $this->SendDebug(
                        'Doorbird', 'Message from SenderID ' . $SenderID . ' with Message ' . $Message . '\r\n Data: ' . print_r($Data, true), 0
                    );
                }
            }
            if ($model == self::D2106V) {
                if ($SenderID == $this->GetIDForIdent('LastRingtone6')) {
                    $this->SetRingPicture(6);
                    $email = $this->ReadPropertyString('email');
                    $this->EmailAlert($email, 6);
                    $this->SendDebug('Doorbird recieved LastRingtone6 at', date('H:i', time()), 0);
                    $this->SendDebug(
                        'Doorbird', 'Message from SenderID ' . $SenderID . ' with Message ' . $Message . '\r\n Data: ' . print_r($Data, true), 0
                    );
                }
            }
            if ($SenderID == $this->GetIDForIdent('LastMovement')) {
                $this->GetSnapshot();
                $this->SendDebug('Doorbird recieved LastMovement at', date('H:i', time()), 0);
                $this->SendDebug(
                    'Doorbird', 'Message from SenderID ' . $SenderID . ' with Message ' . $Message . '\r\n Data: ' . print_r($Data, true), 0
                );
            }
            if ($SenderID == $this->GetIDForIdent('LastDoorOpen')) {
                $this->GetSnapshot();
                $this->SendDebug('Doorbird recieved LastDoorOpen at', date('H:i', time()), 0);
                $this->SendDebug(
                    'Doorbird', 'Message from SenderID ' . $SenderID . ' with Message ' . $Message . '\r\n Data: ' . print_r($Data, true), 0
                );
            }
        }
    }

    public function ReceiveData($JSONString)
    {
        // $this->SendDebug('Doorbird:', $JSONString, 0);
        $payload_udp = json_decode($JSONString);
        // $type = $payload->Type;
        $this->SendDebug('Doorbird Recieve:', utf8_decode($payload_udp->Buffer), 1);
        $dataraw = utf8_decode($payload_udp->Buffer);
        $doorbird_user = $this->ReadPropertyString('User');
        $INTERCOM_ID = substr($doorbird_user, 0, 6);
        $doorbird_password = $this->ReadPropertyString('Password');
        $data = explode(':', $dataraw);
        if (isset($data[1])) {
            $doorbird_id = $data[1];

            if ($doorbird_id == $INTERCOM_ID) {
                $this->SendDebug('Doorbird Recieve:', $payload_udp->Buffer, 0);
            }
        } else {
            // Step 1: get packet via UDP:
            $payload = utf8_decode($payload_udp->Buffer);
            // Step 2: Split up:
            $ident = substr($payload, 0, 3); // lenght 3 Bytes, 0xDE 0xAD 0xBE
            $this->SendDebug('Doorbird Ident:', $ident, 1);
            // $this->SendDebug('Doorbird:', 'Ident: '.bin2hex($ident), 0);
            $version = substr($payload, 3, 1); // lenght 1 Bytes, 0x01
            $this->SendDebug('Doorbird Version:', $version, 1);
            //$this->SendDebug('Doorbird:', 'Version: '.bin2hex($version), 0);
            $opslimit = substr($payload, 4, 4); // lenght 4 Bytes, Used for password stretching with Argon2i.
            $this->SendDebug('Doorbird OPSLimit:', $opslimit, 1);
            // $this->SendDebug('Doorbird:', 'OPSLimit: '.bin2hex($opslimit), 0);
            $memlimit = substr($payload, 8, 4); // lenght 4 Bytes, Used for password stretching with Argon2i.
            $this->SendDebug('Doorbird MEMLimit:', $memlimit, 1);
            // $this->SendDebug('Doorbird:', 'MEMLimit: '.bin2hex($memlimit), 0);
            $salt = substr($payload, 12, 16); // lenght 16 Bytes, Used for password stretching with Argon2i.
            $this->SendDebug('Doorbird Salt:', $salt, 1);
            // $this->SendDebug('Doorbird:', 'Salt: '.bin2hex($salt), 0);
            $nonce = substr($payload, 28, 8); // lenght 8 Bytes, Used for encryption with ChaCha20-Poly1305
            $this->SendDebug('Doorbird Nonce:', $nonce, 1);
            // $this->SendDebug('Doorbird:', 'Nonce: '.bin2hex($nonce), 0);

            $ciphertext =
                substr($payload, 36, 34); // lenght 8 Bytes, With ChaCha20-Poly1305 encrypted text which contains informations about the Event.
            $this->SendDebug('Doorbird Ciphertext:', $ciphertext, 1);
            // $this->SendDebug('Doorbird:', 'Ciphertext: '.bin2hex($ciphertext), 0);
            // Step 3: Generate stretched password
            $password = substr($doorbird_password, 0, 5); // first 5 chars of your password
            $key = sodium_crypto_pwhash(
                SODIUM_CRYPTO_SIGN_SEEDBYTES, $password, $salt, // SALT
                unpack('N', $opslimit)[1], //OPSLIMIT
                unpack('N', $memlimit)[1], //MEMLIMIT
                SODIUM_CRYPTO_PWHASH_ALG_ARGON2I13
            );
            $this->SendDebug('Doorbird Key:', $key, 1); // Key für decrypt in HEX
            // Step 4: Decrypt CIPHERTEXT with ChaCha20-Poly1305, use the stretched password and NONCE
            $decrypted = sodium_crypto_aead_chacha20poly1305_decrypt($ciphertext, '', $nonce, $key);
            if ($decrypted) {
                $this->SendDebug('Doorbird:', 'decryption successfull', 0);
                $this->SendDebug('Doorbird Decrypted Data:', $decrypted, 1);
                // Step 5: Split the output up
                $INTERCOM_ID = substr($decrypted, 0, 6); // Starting 6 chars from the user name
                $this->SendDebug('Doorbird Intercom ID:', $INTERCOM_ID, 0);
                $EVENT = (int) trim(substr($decrypted, 6, 8));

                if ($EVENT == 1) { // Contains the doorbell or „motion“ to detect which event was triggered
                    $this->SetLastRingtone(1);
                }
                if ($EVENT == 101) { // Contains the doorbell or „motion“ to detect which event was triggered
                    $this->SetLastRingtone(2);
                }
                $this->SendDebug('Doorbird Event:', strval($EVENT), 0);
                $TIMESTAMP = unpack('N', substr($decrypted, 14, 4))[1];
                $this->SendDebug('Doorbird Timestamp UTC:', gmdate('H:i:s d.m.Y', $TIMESTAMP), 0);
                $this->SendDebug('Doorbird Timestamp local:', date('H:i:s d.m.Y', $TIMESTAMP), 0);
            } else {
                $this->SendDebug('Doorbird:', 'decryption not successfull', 0);
            }
        }
    }

    public function EmailAlert(string $email, int $ring_id)
    {
        $emailalert = $this->ReadPropertyBoolean('activeemail');
        $emailalert2 = $this->ReadPropertyBoolean('activeemail2');
        $emailalert3 = $this->ReadPropertyBoolean('activeemail3');
        $emailalert4 = $this->ReadPropertyBoolean('activeemail4');
        $emailalert5 = $this->ReadPropertyBoolean('activeemail5');
        $emailalert6 = $this->ReadPropertyBoolean('activeemail6');
        $emailalert7 = $this->ReadPropertyBoolean('activeemail7');
        $emailalert8 = $this->ReadPropertyBoolean('activeemail8');
        $emailalert9 = $this->ReadPropertyBoolean('activeemail9');
        $emailalert10 = $this->ReadPropertyBoolean('activeemail10');
        $emailalert11 = $this->ReadPropertyBoolean('activeemail11');
        if ($emailalert) {
            if ($email != '') {
                $email = $this->ReadPropertyString('email');
            }
            $subject = $this->ReadPropertyString('subject');
            $emailtext = $this->ReadPropertyString('emailtext');
            $this->SendSMTPEmail($ring_id, $email, $subject, $emailtext);
        } elseif ($emailalert2) {
            $email = $this->ReadPropertyString('email2');
            $subject = $this->ReadPropertyString('subject2');
            $emailtext = $this->ReadPropertyString('emailtext2');
            $this->SendSMTPEmail($ring_id, $email, $subject, $emailtext);
        } elseif ($emailalert3) {
            $email = $this->ReadPropertyString('email3');
            $subject = $this->ReadPropertyString('subject3');
            $emailtext = $this->ReadPropertyString('emailtext3');
            $this->SendSMTPEmail($ring_id, $email, $subject, $emailtext);
        } elseif ($emailalert4) {
            $email = $this->ReadPropertyString('email4');
            $subject = $this->ReadPropertyString('subject4');
            $emailtext = $this->ReadPropertyString('emailtext4');
            $this->SendSMTPEmail($ring_id, $email, $subject, $emailtext);
        } elseif ($emailalert5) {
            $email = $this->ReadPropertyString('email5');
            $subject = $this->ReadPropertyString('subject5');
            $emailtext = $this->ReadPropertyString('emailtext5');
            $this->SendSMTPEmail($ring_id, $email, $subject, $emailtext);
        } elseif ($emailalert6) {
            $email = $this->ReadPropertyString('email6');
            $subject = $this->ReadPropertyString('subject6');
            $emailtext = $this->ReadPropertyString('emailtext6');
            $this->SendSMTPEmail($ring_id, $email, $subject, $emailtext);
        } elseif ($emailalert7) {
            $email = $this->ReadPropertyString('email7');
            $subject = $this->ReadPropertyString('subject7');
            $emailtext = $this->ReadPropertyString('emailtext7');
            $this->SendSMTPEmail($ring_id, $email, $subject, $emailtext);
        } elseif ($emailalert8) {
            $email = $this->ReadPropertyString('email8');
            $subject = $this->ReadPropertyString('subject8');
            $emailtext = $this->ReadPropertyString('emailtext8');
            $this->SendSMTPEmail($ring_id, $email, $subject, $emailtext);
        } elseif ($emailalert9) {
            $email = $this->ReadPropertyString('email9');
            $subject = $this->ReadPropertyString('subject9');
            $emailtext = $this->ReadPropertyString('emailtext9');
            $this->SendSMTPEmail($ring_id, $email, $subject, $emailtext);
        } elseif ($emailalert10) {
            $email = $this->ReadPropertyString('email10');
            $subject = $this->ReadPropertyString('subject10');
            $emailtext = $this->ReadPropertyString('emailtext10');
            $this->SendSMTPEmail($ring_id, $email, $subject, $emailtext);
        } elseif ($emailalert11) {
            $email = $this->ReadPropertyString('email11');
            $subject = $this->ReadPropertyString('subject11');
            $emailtext = $this->ReadPropertyString('emailtext11');
            $this->SendSMTPEmail($ring_id, $email, $subject, $emailtext);
        }
    }

    public function ProcessHookDataOLD()
    {
        $webhookusername = $this->ReadPropertyString('webhookusername');
        $webhookpassword = $this->ReadPropertyString('webhookpassword');
        if (!isset($_SERVER['PHP_AUTH_USER'])) {
            $_SERVER['PHP_AUTH_USER'] = '';
        }
        if (!isset($_SERVER['PHP_AUTH_PW'])) {
            $_SERVER['PHP_AUTH_PW'] = '';
        }

        if (($_SERVER['PHP_AUTH_USER'] != $webhookusername) || ($_SERVER['PHP_AUTH_PW'] != $webhookpassword)) {
            header('WWW-Authenticate: Basic Realm="Doorbird WebHook"');
            header('HTTP/1.0 401 Unauthorized');
            echo 'Authorization required';
            return;
        }
        echo 'Webhook Doorbird IP-Symcon';

        //workaround for bug
        if (!isset($_IPS)) {
            global $_IPS;
        }
        if ($_IPS['SENDER'] == 'Execute') {
            echo 'This script cannot be used this way.';
            return;
        }
        //Auswerten von Events von Doorbird
        // Doorbird nutzt GET
        if (isset($_GET['doorbirdevent'])) {
            $data = $_GET['doorbirdevent'];
            if ($data == 'doorbell111') {
                $this->SetLastRingtone(1);
            } elseif ($data == 'doorbell211') {
                $this->SetLastRingtone(2);
            } elseif ($data == 'doorbell311') {
                $this->SetLastRingtone(3);
            } elseif ($data == 'motionsensor') {
                $this->SetLastMovement();
            } elseif ($data == 'dooropen1') {
                $this->SetLastDoorOpen(1);
            } elseif ($data == 'dooropen2') {
                $this->SetLastDoorOpen(2);
            }
        }
    }

    //Profile zuweisen und Geräte anlegen
    public function SetupNotification()
    {
        $sip = [];
        $http = [];
        $favorites = $this->GetFavorites();
        if ($favorites) {
            $data = json_decode($favorites, true);
            $sip = '';
            if (isset($data['sip'])) {
                $sip = $data['sip'];
            }
            $http = '';
            if (isset($data['http'])) {
                $http = $data['http'];
            }
        }
        if (!empty($sip)) {
            foreach ($sip as $key => $sipclient) {
                $this->SendDebug('Doorbird SIP Title', $sipclient['title'], 0);
                $this->SendDebug('Doorbird SIP Value', $sipclient['value'], 0);
                $this->SendDebug('Doorbird SIP Key', $key, 0);
            }
        }
        $webhook_call_motion = $this->GetFavoritURL(false, 'motionsensor');
        $this->SendDebug('webhook call motion', $webhook_call_motion, 0);
        $webhook_call_doorbell_1 = $this->GetFavoritURL(false, 'doorbell1');
        $this->SendDebug('webhook call doorbell 1', $webhook_call_doorbell_1, 0);
        $webhook_call_doorbell_2 = $this->GetFavoritURL(false, 'doorbell2');
        $webhook_call_doorbell_3 = $this->GetFavoritURL(false, 'doorbell3');
        $webhook_call_doorbell_4 = $this->GetFavoritURL(false, 'doorbell4');
        $webhook_call_doorbell_5 = $this->GetFavoritURL(false, 'doorbell5');
        $webhook_call_doorbell_6 = $this->GetFavoritURL(false, 'doorbell6');
        $webhook_call_dooropen_1 = $this->GetFavoritURL(false, 'dooropen1');
        $this->SendDebug('webhook call dooropen', $webhook_call_dooropen_1, 0);
        $webhook_call_dooropen_2 = $this->GetFavoritURL(false, 'dooropen2');
        $this->SendDebug('webhook call dooropen', $webhook_call_dooropen_2, 0);
        $webhook_call_motion_secure = $this->GetFavoritURL(true, 'motionsensor');
        $webhook_call_doorbell_1_secure = $this->GetFavoritURL(true, 'doorbell1');
        $webhook_call_doorbell_2_secure = $this->GetFavoritURL(true, 'doorbell2');
        $webhook_call_doorbell_3_secure = $this->GetFavoritURL(true, 'doorbell3');
        $webhook_call_doorbell_4_secure = $this->GetFavoritURL(true, 'doorbell4');
        $webhook_call_doorbell_5_secure = $this->GetFavoritURL(true, 'doorbell5');
        $webhook_call_doorbell_6_secure = $this->GetFavoritURL(true, 'doorbell6');
        $webhook_call_dooropen_1_secure = $this->GetFavoritURL(true, 'dooropen1');
        $webhook_call_dooropen_2_secure = $this->GetFavoritURL(true, 'dooropen2');
        $duplicate_motionsensor = false;
        $duplicate_dooropen_1 = false;
        $duplicate_dooropen_2 = false;
        $duplicate_doorbell_1 = false;
        $duplicate_doorbell_2 = false;
        $duplicate_doorbell_3 = false;
        $duplicate_doorbell_4 = false;
        $duplicate_doorbell_5 = false;
        $duplicate_doorbell_6 = false;
        if (!empty($http)) {
            foreach ($http as $key => $http_call) {
                $this->SendDebug('Doorbird HTTP Key', $key, 0);
                $this->SendDebug('Doorbird HTTP Title', $http_call['title'], 0);
                $this->SendDebug('Doorbird HTTP Value', $http_call['value'], 0);
                if (($webhook_call_motion == $http_call['value'] && $duplicate_motionsensor == true)
                    || ($webhook_call_doorbell_1 == $http_call['value']
                        && $duplicate_doorbell_1 == true)
                    || ($webhook_call_doorbell_2 == $http_call['value'] && $duplicate_doorbell_2 == true)
                    || ($webhook_call_doorbell_3 == $http_call['value'] && $duplicate_doorbell_3 == true)
                    || ($webhook_call_doorbell_4 == $http_call['value'] && $duplicate_doorbell_4 == true)
                    || ($webhook_call_doorbell_5 == $http_call['value'] && $duplicate_doorbell_5 == true)
                    || ($webhook_call_doorbell_6 == $http_call['value'] && $duplicate_doorbell_6 == true)
                    || ($webhook_call_dooropen_1 == $http_call['value'] && $duplicate_dooropen_1 == true)
                    || ($webhook_call_dooropen_2 == $http_call['value'] && $duplicate_dooropen_2 == true)
                    || ($webhook_call_motion_secure == $http_call['value'] && $duplicate_motionsensor == true)
                    || ($webhook_call_doorbell_1_secure == $http_call['value']
                        && $duplicate_doorbell_1 == true)
                    || ($webhook_call_doorbell_2_secure == $http_call['value'] && $duplicate_doorbell_2 == true)
                    || ($webhook_call_doorbell_3_secure == $http_call['value'] && $duplicate_doorbell_3 == true)
                    || ($webhook_call_doorbell_4_secure == $http_call['value'] && $duplicate_doorbell_4 == true)
                    || ($webhook_call_doorbell_5_secure == $http_call['value'] && $duplicate_doorbell_5 == true)
                    || ($webhook_call_doorbell_6_secure == $http_call['value'] && $duplicate_doorbell_6 == true)
                    || ($webhook_call_dooropen_1_secure == $http_call['value'] && $duplicate_dooropen_1 == true)
                    || ($webhook_call_dooropen_2_secure == $http_call['value'] && $duplicate_dooropen_2 == true)
                ) {
                    $this->SendDebug('Doorbird HTTP Delete Key', $key, 0);
                    $this->DeleteFavorites($key, 'http');
                }
                if ($webhook_call_motion == $http_call['value'] || $webhook_call_motion_secure == $http_call['value']) {
                    $this->SendDebug('Duplicate', $http_call['value'], 0);
                    $duplicate_motionsensor = true;
                }
                if ($webhook_call_doorbell_1 == $http_call['value'] || $webhook_call_doorbell_1_secure == $http_call['value']) {
                    $this->SendDebug('Duplicate', $http_call['value'], 0);
                    $duplicate_doorbell_1 = true;
                }
                if ($webhook_call_doorbell_2 == $http_call['value'] || $webhook_call_doorbell_2_secure == $http_call['value']) {
                    $this->SendDebug('Duplicate', $http_call['value'], 0);
                    $duplicate_doorbell_2 = true;
                }
                if ($webhook_call_doorbell_3 == $http_call['value'] || $webhook_call_doorbell_3_secure == $http_call['value']) {
                    $this->SendDebug('Duplicate', $http_call['value'], 0);
                    $duplicate_doorbell_3 = true;
                }
                if ($webhook_call_doorbell_4 == $http_call['value'] || $webhook_call_doorbell_4_secure == $http_call['value']) {
                    $this->SendDebug('Duplicate', $http_call['value'], 0);
                    $duplicate_doorbell_4 = true;
                }
                if ($webhook_call_doorbell_5 == $http_call['value'] || $webhook_call_doorbell_5_secure == $http_call['value']) {
                    $this->SendDebug('Duplicate', $http_call['value'], 0);
                    $duplicate_doorbell_5 = true;
                }
                if ($webhook_call_doorbell_6 == $http_call['value'] || $webhook_call_doorbell_6_secure == $http_call['value']) {
                    $this->SendDebug('Duplicate', $http_call['value'], 0);
                    $duplicate_doorbell_6 = true;
                }
                if ($webhook_call_dooropen_1 == $http_call['value'] || $webhook_call_dooropen_1_secure == $http_call['value']) {
                    $this->SendDebug('Duplicate', $http_call['value'], 0);
                    $duplicate_dooropen_1 = true;
                }
                if ($webhook_call_dooropen_2 == $http_call['value'] || $webhook_call_dooropen_2_secure == $http_call['value']) {
                    $this->SendDebug('Duplicate', $http_call['value'], 0);
                    $duplicate_dooropen_2 = true;
                }
            }
        }
        //doorbell add favorites
        if (!$duplicate_doorbell_1) {
            $this->AddHTTPFavorite($this->Translate('Doorbell Event 1 IP-Symcon'), 'doorbell1', 1, $this->Translate('Doorbell Event 1 IP-Symcon'));
            IPS_Sleep(300);
        }
        //motionsensor
        if (!$duplicate_motionsensor) {
            $this->AddHTTPFavorite($this->Translate('Motion Event IP-Symcon'), 'motionsensor', 7, $this->Translate('Motion Event IP-Symcon'));
            IPS_Sleep(300);
        }
        //dooropen relay 1
        if (!$duplicate_dooropen_1) {
            $this->AddHTTPFavorite($this->Translate('Doorbell Open Event 1 IP-Symcon'), 'dooropen1', 8, $this->Translate('Doorbell Open Event 1 IP-Symcon'));
            IPS_Sleep(300);
        }
        //dooropen relay 2
        $model = $this->ReadPropertyInteger('model');
        if ($model == self::D1102V || $model == self::D2102V || $model == self::D2103V || self::D2101FV_EKEY) {
            if (!$duplicate_dooropen_2) {
                $this->AddHTTPFavorite($this->Translate('Doorbell Open Event 2 IP-Symcon'), 'dooropen2', 9, $this->Translate('Doorbell Open Event 2 IP-Symcon'));
                IPS_Sleep(300);
            }
        }
        if ($model == self::D2102V || $model == self::D2103V) {
            if (!$duplicate_doorbell_2) {
                $this->AddHTTPFavorite($this->Translate('Doorbell Event 2 IP-Symcon'), 'doorbell2', 2, $this->Translate('Doorbell Event 2 IP-Symcon'));
                IPS_Sleep(300);
            }
        }
        if ($model == self::D2103V) {
            if (!$duplicate_doorbell_3) {
                $this->AddHTTPFavorite($this->Translate('Doorbell Event 3 IP-Symcon'), 'doorbell3', 3, $this->Translate('Doorbell Event 3 IP-Symcon'));
                IPS_Sleep(300);
            }
        }
        if ($model == self::D2104V) {
            if (!$duplicate_doorbell_4) {
                $this->AddHTTPFavorite($this->Translate('Doorbell Event 4 IP-Symcon'), 'doorbell4', 4, $this->Translate('Doorbell Event 4 IP-Symcon'));
                IPS_Sleep(300);
            }
        }
        if ($model == self::D2105V) {
            if (!$duplicate_doorbell_5) {
                $this->AddHTTPFavorite($this->Translate('Doorbell Event 5 IP-Symcon'), 'doorbell5', 5, $this->Translate('Doorbell Event 5 IP-Symcon'));
                IPS_Sleep(300);
            }
        }
        if ($model == self::D2106V) {
            if (!$duplicate_doorbell_6) {
                $this->AddHTTPFavorite($this->Translate('Doorbell Event 6 IP-Symcon'), 'doorbell6', 6, $this->Translate('Doorbell Event 6 IP-Symcon'));
                IPS_Sleep(300);
            }
        }
        /*
        $schedule = $this->GetSchedule();
        if ($schedule) {
            $data = json_decode($schedule);
            if (is_null($data)) {
                $this->SendDebug('Doorbird', 'could not get schedule', 0);
                echo 'could not get schedule';
            } else {
                foreach ($data as $key => $entry) {
                    if ($entry->input == 'doorbell') {
                        $output = $entry->output;
                        $this->SendDebug('Doorbird doorbell', json_encode($output), 0);
                        $this->SendDebug('Doorbird', 'create schedule with favorite 112', 0);
                        foreach ($output as $outputentry) {
                            $event = $outputentry->event;
                            $param = $outputentry->param;
                            if ($event == 'http' && $param == '111') {
                                $this->SendDebug('Doorbird', 'schedule with favorite 111 exists', 0);
                            } else {
                                $this->SendDebug('Doorbird', 'create schedule with favorite 111', 0);
                                $this->AddHTTPDoorbellSchedule();
                            }
                        }
                    }
                    if ($entry->input == 'motion') {
                        $output = $entry->output;
                        $this->SendDebug('Doorbird motion', json_encode($output), 0);
                        foreach ($output as $outputentry) {
                            $event = $outputentry->event;
                            $param = $outputentry->param;
                            if ($event == 'http' && $param == '112') {
                                $this->SendDebug('Doorbird', 'schedule with favorite 112 exists', 0);
                            } else {
                                $this->SendDebug('Doorbird', 'create schedule with favorite 112', 0);
                                $this->AddHTTPMotionSchedule();
                            }
                        }
                    }
                }
                $current_schedule = $this->GetSchedule();
                $this->WriteAttributeString('schedule', $current_schedule);
            }
        }
        */
    }

    public function GetFavorites()
    {
        $URL = self::GET_FAVORITES;
        return $this->SendDoorbird($URL);
    }

    public function DeleteFavorites(int $id, string $type)
    {
        $URL = self::DELETE_FAVORITE . $type . '&id=' . $id;
        return $this->SendDoorbird($URL);
    }

    public function AddHTTPFavorite(string $title, string $event, int $id, string $message)
    {
        $event_value = $this->GetEventValue();
        $title = urlencode($title);
        $URL = self::SET_HTTP_FAVORITE . $title . $event_value . $event . "&id=" . $id;
        $this->SendDebug('Doorbird', 'Add HTTP Favorite ' . $message, 0);
        return $this->SendDoorbird($URL);
    }

    public function AddSIPFavorite(string $title, string $event, int $id, string $message)
    {
        $event_value = $this->GetEventValue();
        $title = urlencode($title);
        $URL = self::SET_SIP_FAVORITE . $title . $event_value . $event . "&id=" . $id;
        $this->SendDebug('Doorbird', 'Add HTTP Favorite ' . $message, 0);
        return $this->SendDoorbird($URL);
    }

    public function SendDoorbird(string $URL)
    {
        $doorbirduser = $this->ReadPropertyString('User');
        $doorbirdpassword = $this->ReadPropertyString('Password');
        $Doorbird_URL = $this->GetDoorbirdURL() . $URL;
        $this->SendDebug('Doorbird URL', $Doorbird_URL, 0);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $Doorbird_URL);
        curl_setopt($ch, CURLOPT_TIMEOUT, 5); //timeout after 5 seconds
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
        curl_setopt($ch, CURLOPT_USERPWD, "$doorbirduser:$doorbirdpassword");
        $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);   //get status code
        $this->SendDebug('Doorbird', 'Status Code ' . $status_code, 0);
        $result = curl_exec($ch);
        curl_close($ch);
        return $result;
    }

    public function GetSchedule()
    {
        $URL = self::GET_SCHEDULE;
        $result = $this->SendDoorbird($URL);
        $this->SendDebug('Doorbird Schedule', $result, 0);
        return $result;
    }

    public function AddSchedule(string $schedule)
    {
        $URL = self::GET_SCHEDULE;
        return $this->SendDoorbirdPOST($URL, $schedule);
    }

    public function GetInfo()
    {
        $URL = self::GET_INFO;
        $result = $this->SendDoorbird($URL);
        $this->SendDebug('Doorbird Info:', $result, 0);
        $result = json_decode($result);
        if (isset($result->BHA->VERSION[0]->FIRMWARE)) {
            $firmware = $result->BHA->VERSION[0]->FIRMWARE;
            $this->SetValue('FirmwareVersion', $firmware);
        }
        if (isset($result->BHA->VERSION[0]->BUILD_NUMBER)) {
            $buildnumber = $result->BHA->VERSION[0]->BUILD_NUMBER;
            $this->SetValue('Buildnumber', $buildnumber);
        }
        if (isset($result->BHA->VERSION[0]->WIFI_MAC_ADDR)) {
            $wifimacaddr = $result->BHA->VERSION[0]->WIFI_MAC_ADDR;
            $this->SetValue('MACAdress', $wifimacaddr);
        }
        return $result;
    }

    public function GetHistory(int $ring_id)
    {
        $name = 'Doorbird Klingel';
        $ident = 'DoorbirdRingPic';
        $picturename = 'doorbirdringpic_';
        for ($i = 1; $i <= 20; $i++) {
            $URL = self::GET_HISTORY . $i;
            $Content = $this->SendDoorbird($URL);

            //testen ob im Medienpool existent
            if ($ring_id == 1) {
                $catid = $this->ReadAttributeInteger('pictures_history');
            } elseif ($ring_id == 2) {
                $catid = $this->ReadAttributeInteger('pictures_history2');
            } elseif ($ring_id == 3) {
                $catid = $this->ReadAttributeInteger('pictures_history3');
            } else {
                $catid = $this->ReadAttributeInteger('pictures_history');
            }
            $MediaID = @IPS_GetObjectIDByIdent($ident . $i, $catid);
            if ($MediaID === false) {
                $MediaID = IPS_CreateMedia(1);                  // Image im MedienPool anlegen
                IPS_SetParent($MediaID, $catid); // Medienobjekt einsortieren unter der Doorbird Kategorie Historie
                IPS_SetIdent($MediaID, $ident . $i);
                IPS_SetPosition($MediaID, $i);
                IPS_SetMediaCached($MediaID, true);
                // Das Cachen für das Mediaobjekt wird aktiviert.
                // Beim ersten Zugriff wird dieses von der Festplatte ausgelesen
                // und zukünftig nur noch im Arbeitsspeicher verarbeitet.
                $ImageFile = IPS_GetKernelDir() . 'media' . DIRECTORY_SEPARATOR . $picturename . $i . '.jpg';  // Image-Datei
                IPS_SetMediaFile($MediaID, $ImageFile, false);    // Image im MedienPool mit Image-Datei verbinden
                //$savetime = date('d.m.Y H:i:s');
                //IPS_SetName($MediaID, $name.' '.$i.' '.$savetime); // Medienobjekt benennen
                IPS_SetName($MediaID, $name . ' ' . $i); // Medienobjekt benennen
                //IPS_SetInfo ($MediaID, $savetime);
                IPS_SetMediaContent($MediaID, base64_encode($Content));  //Bild Base64 codieren und ablegen
                IPS_SendMediaEvent($MediaID); //aktualisieren
            } else {
                //$savetime = date('d.m.Y H:i:s');
                //IPS_SetName($MediaID, $name.' '.$currentsnapshotid.' '.$savetime); // Medienobjekt benennen
                //IPS_SetInfo ($MediaID, $savetime);
                IPS_SetMediaContent($MediaID, base64_encode($Content));  //Bild Base64 codieren und ablegen
                IPS_SendMediaEvent($MediaID); //aktualisieren
            }
            IPS_Sleep(200);
        }
    }

    public function GetSnapshot()
    {
        $name = 'Doorbird Snapshot';
        $ident = 'DoorbirdSnapshotPic';
        $picturename = 'doorbirdsnapshot_';
        $picturelimit = $this->ReadPropertyInteger('picturelimitsnapshot');
        $catid = $this->ReadPropertyInteger('categorysnapshot');
        if ($catid > 0) {
            $this->GetImageDoorbell($name, $ident, $picturename, $picturelimit, $catid);
        } else {
            $this->SendDebug('Doorbird', 'No category is set, please set category.', 0);
            $this->LogMessage('Es wurde keine Kategorie gesetzt. Die Funktion wurde nicht ausgeführt.', KL_DEBUG);
            echo 'Es wurde keine Kategorie gesetzt. Die Funktion wurde nicht ausgeführt.';
        }
    }

    public function GetRingPicture()
    {
        $this->SetRingPicture(1);
    }

    public function Light()
    {
        $URL = self::LIGHT;
        return $this->SendDoorbird($URL);
    }

    public function OpenDoor()
    {
        $URL = self::OPEN_DOOR;
        return $this->SendDoorbird($URL);
    }

    public function OpenDoorRelais(string $doorcontrollerID, int $relaisnumber)
    {
        $URL = self::OPEN_DOOR . '?r=' . $doorcontrollerID . '@' . $relaisnumber;
        return $this->SendDoorbird($URL);
    }

    public function OpenDoorRelaisNumber(int $relaisnumber)
    {
        $URL = self::OPEN_DOOR . '?r=' . $relaisnumber;
        return $this->SendDoorbird($URL);
    }

    /** Request Action
     *
     * @param $Ident
     * @param $Value
     *
     * @return bool|void
     */
    public function RequestAction($Ident, $Value)
    {
        switch ($Ident) {
            case 'DoorbirdButtonLight':
                $this->Light();
                break;
            case 'DoorbirdButtonDoor':
                $this->OpenDoor();
                break;
            case 'DoorbirdButtonSnapshot':
                $this->GetSnapshot();
                break;
            default:
                $this->SendDebug('Doorbird', 'Invalid ident', 0);
        }
    }

    /*
     * Configuration Form
     */

    /**
     * build configuration form.
     *
     * @return string
     */
    public function GetConfigurationForm()
    {
        // return current form
        return json_encode(
            [
                'elements' => $this->FormHead(),
                'actions'  => $this->FormActions(),
                'status'   => $this->FormStatus()]
        );
    }

    protected function SetupVariables()
    {
        $this->RegisterVariableString('DoorbirdVideo', 'Doorbird Video', '~HTMLBox', $this->_getPosition());
        $this->RegisterProfile('Doorbird.Ring', 'Alert', '', '', 0, 0, 1, 0, VARIABLETYPE_STRING);
        $model = $this->ReadPropertyInteger('model');
        if ($model == self::D101 || $model == self::D101S || $model == self::D202 || $model == self::D1101V || $model == self::D2101V || $model == self::D21DKV || $model == self::D21DKH || $model == self::D1101UV
            || $model == self::D2101FPBK || $model == self::D2101FPBI || $model == self::D2101IKH || $model == self::D2101IKH || $model == self::D2101KH || $model == self::D2101KH || $model == self::D1101KH
            || $model == self::D2101KV || $model == self::D2101FV || $model == self::D2101FV_EKEY || $model == self::D2100E || $model == self::D1100E) {
            $this->RegisterVariableString('LastRingtone', $this->Translate('Time last bell'), 'Doorbird.Ring', $this->_getPosition());
        }
        if ($model == self::D2102V || $model == self::D1102V || $model == self::D2102FV_EKEY || $model == self::D2102FV || $model == self::D2102KV) {
            $this->RegisterVariableString('LastRingtone', $this->Translate('Time last bell'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone2', $this->Translate('Time last bell 2'), 'Doorbird.Ring', $this->_getPosition());
        }
        if ($model == self::D2103V) {
            $this->RegisterVariableString('LastRingtone', $this->Translate('Time last bell'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone2', $this->Translate('Time last bell 2'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone3', $this->Translate('Time last bell 3'), 'Doorbird.Ring', $this->_getPosition());
        }
        if ($model == self::D2104V) {
            $this->RegisterVariableString('LastRingtone', $this->Translate('Time last bell'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone2', $this->Translate('Time last bell 2'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone3', $this->Translate('Time last bell 3'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone4', $this->Translate('Time last bell 4'), 'Doorbird.Ring', $this->_getPosition());
        }
        if ($model == self::D2105V) {
            $this->RegisterVariableString('LastRingtone', $this->Translate('Time last bell'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone2', $this->Translate('Time last bell 2'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone3', $this->Translate('Time last bell 3'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone4', $this->Translate('Time last bell 4'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone5', $this->Translate('Time last bell 5'), 'Doorbird.Ring', $this->_getPosition());
        }
        if ($model == self::D2106V) {
            $this->RegisterVariableString('LastRingtone', $this->Translate('Time last bell'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone2', $this->Translate('Time last bell 2'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone3', $this->Translate('Time last bell 3'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone4', $this->Translate('Time last bell 4'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone5', $this->Translate('Time last bell 5'), 'Doorbird.Ring', $this->_getPosition());
            $this->RegisterVariableString('LastRingtone6', $this->Translate('Time last bell 6'), 'Doorbird.Ring', $this->_getPosition());
        }
        $this->RegisterProfile('Doorbird.Movement', 'Motion', '', '', 0, 0, 1, 0, VARIABLETYPE_STRING);
        $this->RegisterVariableString('LastMovement', $this->Translate('Time of last movement'), 'Doorbird.Movement', $this->_getPosition());

        $this->RegisterProfile('Doorbird.LastDoor', 'LockOpen', '', '', 0, 0, 1, 0, VARIABLETYPE_STRING);
        $this->RegisterVariableString('LastDoorOpen', $this->Translate('Time last door opening'), 'Doorbird.LastDoor', $this->_getPosition());



        $this->RegisterProfile('Doorbird.Firmware', 'Robot', '', '', 0, 0, 1, 0, VARIABLETYPE_STRING);
        $this->RegisterVariableString('FirmwareVersion', $this->Translate('Doorbird Firmware Version'), 'Doorbird.Firmware', $this->_getPosition());
        $this->RegisterProfile('Doorbird.Buildnumber', 'Gear', '', '', 0, 0, 1, 0, VARIABLETYPE_STRING);
        $this->RegisterVariableString('Buildnumber', $this->Translate('Doorbird Build Number'), 'Doorbird.Buildnumber', $this->_getPosition());
        $this->RegisterProfile('Doorbird.MAC', 'Notebook', '', '', 0, 0, 1, 0, VARIABLETYPE_STRING);
        $this->RegisterVariableString('MACAdress', $this->Translate('Doorbird WLAN MAC'), 'Doorbird.MAC', $this->_getPosition());
        $lightass = [
            [0, 'Licht einschalten', 'Light', -1]];
        $doorass = [
            [0, 'Tür öffnen', 'LockOpen', -1]];
        $snapass = [
            [0, 'Bild speichern', 'Image', -1]];
        $this->RegisterProfileAssociation('Doorbird.Light', 'Light', '', '', 0, 0, 0, 0, VARIABLETYPE_INTEGER, $lightass);
        $this->RegisterProfileAssociation('Doorbird.Door', 'LockOpen', '', '', 0, 0, 0, 0, VARIABLETYPE_INTEGER, $doorass);
        $this->RegisterProfileAssociation('Doorbird.Snapshot', 'Image', '', '', 0, 0, 0, 0, VARIABLETYPE_INTEGER, $snapass);
        $this->RegisterVariableInteger('DoorbirdButtonLight', 'Doorbird IR Beleuchtung', 'Doorbird.Light', 10);
        $this->EnableAction('DoorbirdButtonLight');
        $this->RegisterVariableInteger('DoorbirdButtonDoor', 'Doorbird Türöffner', 'Doorbird.Door', $this->_getPosition());
        $this->EnableAction('DoorbirdButtonDoor');
        $this->RegisterVariableInteger('DoorbirdButtonSnapshot', 'Doorbird Bild abspeichern', 'Doorbird.Snapshot', $this->_getPosition());
        $this->EnableAction('DoorbirdButtonSnapshot');

        if ($this->ReadPropertyBoolean('doorbird_app')) {
            $exist_app = $this->CheckExistence('doorbird_app');
            $this->RegisterVariableString('doorbird_app', $this->Translate('Launch Doorbird App'), '~HTMLBox', $this->_getPosition());
            $content = '<a href="doorbird://" title="Doorbird App"><img alt="Doorbird App" src="data:image/png;base64, ' . self::PICTURE_LOGO_DOORBIRD . '" width="15%" height="15%"></a>';
            $this->SetIcon('doorbird_app', 'Mobile', $exist_app);
            $this->SetValue('doorbird_app', $content);
        }
        if ($this->ReadPropertyBoolean('slideshow_history')) {
            if ($model == self::D101 || $model == self::D101S || $model == self::D202 || $model == self::D1101V || $model == self::D2101V || $model == self::D21DKV || $model == self::D21DKH || $model == self::D1101UV
                || $model == self::D2101FPBK || $model == self::D2101FPBI || $model == self::D2101IKH || $model == self::D2101IKH || $model == self::D2101KH || $model == self::D2101KH || $model == self::D1101KH
                || $model == self::D2101KV || $model == self::D2101FV || $model == self::D2101FV_EKEY || $model == self::D2100E || $model == self::D1100E
                || $model == self::D2102V || $model == self::D1102V || $model == self::D2102FV_EKEY || $model == self::D2102FV || $model == self::D2102KV
                || $model == self::D2103V || $model == self::D2104V || $model == self::D2105V || $model == self::D2106V) {
                $exist_slideshow_history_1 = $this->CheckExistence('slideshow_history_1');
                $this->RegisterVariableString('slideshow_history_1', $this->Translate('Slideshow History'), '~HTMLBox', $this->_getPosition());
                $content = '<iframe src="' . $this->GetWebhookURL(true) . '/slideshowhistory" width=' . $this->ReadPropertyInteger('iframe_width_history') . 'px height=' . $this->ReadPropertyInteger('iframe_height_history') . 'px></iframe>';
                $this->SetIcon('slideshow_history_1', 'Camera', $exist_slideshow_history_1);
                $this->SetValue('slideshow_history_1', $content);
            }
            if ($model == self::D2102V || $model == self::D1102V || $model == self::D2102FV_EKEY || $model == self::D2102FV || $model == self::D2102KV || $model == self::D2103V || $model == self::D2104V || $model == self::D2105V || $model == self::D2106V) {
                $exist_slideshow_history_2 = $this->CheckExistence('slideshow_history_2');
                $this->RegisterVariableString('slideshow_history_2', $this->Translate('Slideshow History 2'), '~HTMLBox', $this->_getPosition());
                $content = '<iframe src="' . $this->GetWebhookURL(true) . '/slideshowhistory2" width=' . $this->ReadPropertyInteger('iframe_width_history') . 'px height=' . $this->ReadPropertyInteger('iframe_height_history') . 'px></iframe>';
                $this->SetIcon('slideshow_history_2', 'Camera', $exist_slideshow_history_2);
                $this->SetValue('slideshow_history_2', $content);
            }
            if ($model == self::D2103V || $model == self::D2104V || $model == self::D2105V || $model == self::D2106V) {
                $exist_slideshow_history_3 = $this->CheckExistence('slideshow_history_3');
                $this->RegisterVariableString('slideshow_history_3', $this->Translate('Slideshow History'), '~HTMLBox', $this->_getPosition());
                $content = '<iframe src="' . $this->GetWebhookURL(true) . '/slideshowhistory3" width=' . $this->ReadPropertyInteger('iframe_width_history') . 'px height=' . $this->ReadPropertyInteger('iframe_height_history') . 'px></iframe>';
                $this->SetIcon('slideshow_history_3', 'Camera', $exist_slideshow_history_3);
                $this->SetValue('slideshow_history_3', $content);
            }
            if ($$model == self::D2104V || $model == self::D2105V || $model == self::D2106V) {
                $exist_slideshow_history_4 = $this->CheckExistence('slideshow_history_4');
                $this->RegisterVariableString('slideshow_history_4', $this->Translate('Slideshow History'), '~HTMLBox', $this->_getPosition());
                $content = '<iframe src="' . $this->GetWebhookURL(true) . '/slideshowhistory4" width=' . $this->ReadPropertyInteger('iframe_width_history') . 'px height=' . $this->ReadPropertyInteger('iframe_height_history') . 'px></iframe>';
                $this->SetIcon('slideshow_history_4', 'Camera', $exist_slideshow_history_4);
                $this->SetValue('slideshow_history_4', $content);
            }
            if ($model == self::D2105V || $model == self::D2106V) {
                $exist_slideshow_history_5 = $this->CheckExistence('slideshow_history_5');
                $this->RegisterVariableString('slideshow_history_5', $this->Translate('Slideshow History'), '~HTMLBox', $this->_getPosition());
                $content = '<iframe src="' . $this->GetWebhookURL(true) . '/slideshowhistory5" width=' . $this->ReadPropertyInteger('iframe_width_history') . 'px height=' . $this->ReadPropertyInteger('iframe_height_history') . 'px></iframe>';
                $this->SetIcon('slideshow_history_5', 'Camera', $exist_slideshow_history_5);
                $this->SetValue('slideshow_history_5', $content);
            }
            if ($model == self::D2106V) {
                $exist_slideshow_history_6 = $this->CheckExistence('slideshow_history_6');
                $this->RegisterVariableString('slideshow_history_6', $this->Translate('Slideshow History'), '~HTMLBox', $this->_getPosition());
                $content = '<iframe src="' . $this->GetWebhookURL(true) . '/slideshowhistory6" width=' . $this->ReadPropertyInteger('iframe_width_history') . 'px height=' . $this->ReadPropertyInteger('iframe_height_history') . 'px></iframe>';
                $this->SetIcon('slideshow_history_6', 'Camera', $exist_slideshow_history_6);
                $this->SetValue('slideshow_history_6', $content);
            }
        }
        if ($this->ReadPropertyBoolean('slideshow_snapshot')) {
            $exist_slideshow_snapshot = $this->CheckExistence('slideshow_snapshot');
            $this->RegisterVariableString('slideshow_snapshot', $this->Translate('Slideshow Snapshot'), '~HTMLBox', $this->_getPosition());
            $content = '<iframe src="' . $this->GetWebhookURL(true) . '/slideshowsnapshot" width=' . $this->ReadPropertyInteger('iframe_width_snapshot') . 'px height=' . $this->ReadPropertyInteger('iframe_height_snapshot') . 'px></iframe>';
            $this->SetIcon('slideshow_snapshot', 'Camera', $exist_slideshow_snapshot);
            $this->SetValue('slideshow_snapshot', $content);
        }
        if ($this->ReadPropertyBoolean('webadmin')) {
            $exist_webadmin = $this->CheckExistence('webadmin');
            $this->RegisterVariableString('webadmin', $this->Translate('Web Admin'), '~HTMLBox', $this->_getPosition());
            $content = '<iframe src="https://webadmin.doorbird.com" width=' . $this->ReadPropertyInteger('iframe_width_webadmin') . 'px height=' . $this->ReadPropertyInteger('iframe_height_webadmin') . 'px></iframe>';
            $this->SetIcon('webadmin', 'Database', $exist_webadmin);
            $this->SetValue('webadmin', $content);
        }
        $this->ValidateConfiguration();
    }

    protected function GetPictureDebug()
    {
        return $this->ReadAttributeBoolean('pictures_debug');
    }

    protected function CheckAccess()
    {
        $favorites = $this->GetFavorites();
        $error = strpos($favorites, '401 Unauthorized');
        if ($error > 0) {
            return false;
        } else {
            return true;
        }
    }

    protected function GetHostIP()
    {
        $ip = exec('sudo ifconfig eth0 | grep "inet Adresse:" | cut -d: -f2 | awk "{ print $1}"');
        if ($ip == '') {
            $ipinfo = Sys_GetNetworkInfo();
            $ip = $ipinfo[0]['IP'];
        }
        return $ip;
    }

    protected function CheckEmail($email)
    {
        $ipsversion = $this->GetIPSVersion();
        if ($email == '') {
            $this->SetStatus(214); // email not set
        }
        if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
            //email valid
            if ($ipsversion == 0) {
                //Skript beim EmailAlert
                $IDEmail = @($this->GetIDForIdent('SendEmailAlert'));
                if ($IDEmail === false) {
                    $IDEmail = $this->RegisterScript('SendEmailAlert', 'Email Alert', $this->CreateEmailAlertScript($email), 19);
                    IPS_SetHidden($IDEmail, true);
                }
                $this->SetEmailEvent($IDEmail, true);
            }
        } else {
            $this->SetStatus(207); //email not valid
        }
    }

    /**
     * Löscht einen WebHook, wenn vorhanden.
     *
     * @param string $WebHook URI des WebHook.
     */
    protected function UnregisterHook(string $WebHook)
    {
        $ids = IPS_GetInstanceListByModuleID('{015A6EB8-D6E5-4B93-B496-0D3F77AE9FE1}');
        $index = 0;
        if (count($ids) > 0) {
            $hooks = json_decode(IPS_GetProperty($ids[0], 'Hooks'), true);
            $found = false;
            foreach ($hooks as $index => $hook) {
                if ($hook['Hook'] == $WebHook) {
                    $found = $index;
                    break;
                }
            }
            if ($found !== false) {
                array_splice($hooks, $index, 1);
                IPS_SetProperty($ids[0], 'Hooks', json_encode($hooks));
                IPS_ApplyChanges($ids[0]);
            }
        }
    }

    /**
     * Löscht eine Script, sofern vorhanden.
     *
     * @param string $Ident Ident der Variable.
     */
    protected function UnregisterScript(string $Ident)
    {
        $sid = @IPS_GetObjectIDByIdent($Ident, $this->InstanceID);
        if ($sid === false) {
            return;
        }
        if (!IPS_ScriptExists($sid)) {
            return;
        } //bail out
        IPS_DeleteScript($sid, true);
    }

    protected function is_valid_domain($url)
    {
        $validation = false;
        /*Parse URL*/
        $urlparts = parse_url(filter_var($url, FILTER_SANITIZE_URL));
        /*Check host exist else path assign to host*/
        if (!isset($urlparts['host'])) {
            $urlparts['host'] = $urlparts['path'];
        }

        if ($urlparts['host'] != '') {
            /*Add scheme if not found*/
            if (!isset($urlparts['scheme'])) {
                $urlparts['scheme'] = 'http';
            }
            $exist = function_exists('checkdnsrr');
            if ($exist) {
                /*Validation*/
                if (checkdnsrr($urlparts['host'], 'A') && in_array($urlparts['scheme'], ['http', 'https']) && ip2long($urlparts['host']) === false) {
                    $urlparts['host'] = preg_replace('/^www\./', '', $urlparts['host']);
                    $url = $urlparts['scheme'] . '://' . $urlparts['host'] . '/';

                    if (filter_var($url, FILTER_VALIDATE_URL) !== false && @get_headers($url)) {
                        $validation = true;
                    }
                }
            }
        }

        if (!$validation) {
            //echo $url.' Its Invalid Domain Name.';
            return false;
        } else {
            //echo $url.' is a Valid Domain Name.';
            return true;
        }
    }

    protected function is_valid_localdomain($url)
    {
        $validation = false;
        /*Parse URL*/
        $urlparts = parse_url(filter_var($url, FILTER_SANITIZE_URL));
        /*Check host exist else path assign to host*/
        if (!isset($urlparts['host'])) {
            $urlparts['host'] = $urlparts['path'];
        }

        if ($urlparts['host'] != '') {
            /*Add scheme if not found*/
            if (!isset($urlparts['scheme'])) {
                $urlparts['scheme'] = 'http';
            }
            $exist = function_exists('checkdnsrr');
            if ($exist) {
                /*Validation*/
                if (checkdnsrr($urlparts['host'], 'A') && in_array($urlparts['scheme'], ['http', 'https']) && ip2long($urlparts['host']) === false) {
                    $urlparts['host'] = preg_replace('/^www\./', '', $urlparts['host']);
                    $url = $urlparts['scheme'] . '://' . $urlparts['host'] . '/';

                    if (filter_var($url, FILTER_VALIDATE_URL) !== false && @get_headers($url)) {
                        $validation = true;
                    }
                }
            }
        }

        if (!$validation) {
            //echo $url.' Its Invalid Domain Name.';
            return false;
        } else {
            //echo $url.' is a Valid Domain Name.';
            return true;
        }
    }

    protected function GetURLPrefix($url)
    {
        $prehttp = strpos($url, 'http://');
        $prehttps = strpos($url, 'https://');
        if ($prehttp === 0) {
            $prefix = ''; //Prefix ist http
        } elseif ($prehttps === 0) {
            $prefix = ''; //Prefix ist https
        } else {
            $prefix = 'http://'; //Prefix ergänzen
        }
        return $prefix;
    }

    protected function GetConnectURL()
    {
        $InstanzenListe = IPS_GetInstanceListByModuleID('{9486D575-BE8C-4ED8-B5B5-20930E26DE6F}');
        $InstanzCount = 0;
        $ConnectControl = 0;
        foreach ($InstanzenListe as $InstanzID) {
            $ConnectControl = $InstanzID;
            $InstanzCount++;
            $Childs[] = IPS_GetChildrenIDs($InstanzID);
        }

        if ($ConnectControl > 0) {
            return CC_GetUrl($ConnectControl);
        } else {
            return false;
        }
    }

    protected function SetLastRingtone($doorbell_id)
    {
        $relaxationdoorbell = $this->ReadPropertyInteger('relaxationdoorbell');
        if ($doorbell_id == 1) {
            $last_write = IPS_GetVariable($this->GetIDForIdent('LastRingtone'))['VariableChanged'];
        } else {
            $last_write = IPS_GetVariable($this->GetIDForIdent('LastRingtone' . $doorbell_id))['VariableChanged'];
        }
        $current_time = time();
        if (($current_time - $last_write) > $relaxationdoorbell) {
            $this->SendDebug('Doorbird:', 'doorbell event', 0);
            if ($doorbell_id == 1) {
                $this->SendDebug('Doorbird:', 'Set LastRingtone ' . date('d.m.y H:i:s'), 0);
                $this->SetValue('LastRingtone', date('d.m.y H:i:s'));
            } else {
                $this->SendDebug('Doorbird:', 'Set LastRingtone' . $doorbell_id . ' ' . date('d.m.y H:i:s'), 0);
                $this->SetValue('LastRingtone' . $doorbell_id, date('d.m.y H:i:s'));
            }
        }
    }

    protected function SetLastMovement()
    {
        $relaxationmotionsensor = $this->ReadPropertyInteger('relaxationmotionsensor');
        $last_write = IPS_GetVariable($this->GetIDForIdent('LastMovement'))['VariableChanged'];
        $current_time = time();
        if (($current_time - $last_write) > $relaxationmotionsensor) {
            $this->SendDebug('Doorbird:', 'motionsensor event', 0);
            $this->SetValue('LastMovement', date('d.m.y H:i:s'));
        }
    }

    protected function SetLastDoorOpen($id)
    {
        $relaxationdooropen = $this->ReadPropertyInteger('relaxationdooropen');
        $last_write = IPS_GetVariable($this->GetIDForIdent('LastDoorOpen'))['VariableChanged'];
        $current_time = time();
        if (($current_time - $last_write) > $relaxationdooropen) {
            $this->SendDebug('Doorbird:', 'dooropen event', 0);
            if ($id == 2) {
                $this->SetValue('LastDoorOpen_2', date('d.m.y H:i:s'));
            } else {
                $this->SetValue('LastDoorOpen', date('d.m.y H:i:s'));
            }
        }
    }

    protected function SendSMTPEmail($ring_id, $email, $subject, $emailtext)
    {
        if ($ring_id == 1) {
            $catid = $this->ReadAttributeInteger('pictures_history');
        } elseif ($ring_id == 2) {
            $catid = $this->ReadAttributeInteger('pictures_history2');
        } elseif ($ring_id == 3) {
            $catid = $this->ReadAttributeInteger('pictures_history3');
        } else {
            $catid = $this->ReadAttributeInteger('pictures_history');
        }
        $mediaids = IPS_GetChildrenIDs($catid);
        // $countmedia = count($mediaids);
        $this->SendDebug('Get Email Pictures:', 'Pictures Ring ' . $ring_id . ' ' . json_encode($mediaids), 0);
        foreach ($mediaids as $key => $mediaid) {
            $mediainfo = IPS_GetMedia($mediaid);
            $this->SendDebug('Picture:', $mediainfo['MediaFile'], 0);
            if ($mediainfo['MediaFile'] == 'media/doorbirdring' . $ring_id . 'pic_1.jpg') {
                $mailer = $this->ReadPropertyInteger('smtpmodule');
                $this->SendDebug('Send Email:', 'Send Email with ' . IPS_GetName($mailer) . ' and picture ' . IPS_GetName($mediaid), 0);
                SMTP_SendMailMediaEx($mailer, $email, $subject, $emailtext, $mediaid);
            }
        }
    }

    /**
     * This function will be called by the hook control. Visibility should be protected!
     */
    protected function ProcessHookData()
    {
        $webhookusername = $this->ReadPropertyString('webhookusername');
        $webhookpassword = $this->ReadPropertyString('webhookpassword');

        $request_uri = $_SERVER['REQUEST_URI'];
        $this->SendDebug('Request URI:', $request_uri, 0);
        $script_name = substr($_SERVER['SCRIPT_NAME'], strlen('/hook/doorbird' . $this->InstanceID));
        // $this->SendDebug('Request Script Name:', $script_name, 0);
        $request_type = strpos($script_name, 'picture');
        if ($request_type == 1 || $script_name == '/slideshowhistory' || $script_name == '/slideshowhistory2' || $script_name == '/slideshowhistory3' || $script_name == '/slideshowhistory4'|| $script_name == '/slideshowhistory5'|| $script_name == '/slideshowhistory6' || $script_name == '/slideshowsnapshot' || $script_name == '/cssslideshow' || $script_name == '/cssslideshow/' || $script_name == '/cssslideshow/css-fadeshow.css' || $script_name == '/cssslideshow/css-fadeshow.css/') {
            $passwordcheck = false;
        } else {
            $passwordcheck = true;
        }

        if ($passwordcheck) {
            if (!isset($_SERVER['PHP_AUTH_USER'])) {
                $_SERVER['PHP_AUTH_USER'] = '';
                $this->SendDebug('Doorbird:', 'Webhook user is empty', 0);
            }
            if (isset($_SERVER['PHP_AUTH_USER'])) {
                $this->SendDebug('Doorbird Recieve:', 'webhook user: ' . $_SERVER['PHP_AUTH_USER'], 0);
            }
            if (!isset($_SERVER['PHP_AUTH_PW'])) {
                $_SERVER['PHP_AUTH_PW'] = '';
                $this->SendDebug('Doorbird:', 'Webhook password is empty', 0);
            }
            if (isset($_SERVER['PHP_AUTH_PW'])) {
                $this->SendDebug('Doorbird Recieve:', 'webhook password: ' . $_SERVER['PHP_AUTH_PW'], 0);
            }

            if (($_SERVER['PHP_AUTH_USER'] != $webhookusername) || ($_SERVER['PHP_AUTH_PW'] != $webhookpassword)) {
                $this->SendDebug('Doorbird:', 'wrong webhook user or password', 0);
                header('WWW-Authenticate: Basic Realm="Doorbird WebHook"');
                header('HTTP/1.0 401 Unauthorized');
                echo 'Authorization required';
                return;
            }
        }

        if ($request_type == 1) { // Picture Request
            $picture = explode('.', $script_name);
            $picture_name = substr($picture[0], 1);
            if ($this->GetPictureDebug()) {
                $this->SendDebug('Picture Name:', $picture_name, 0);
            }
            $picture_info = explode('_', $picture_name);
            $picture_type = $picture_info[0];
            if ($this->GetPictureDebug()) {
                $this->SendDebug('Picture Type:', $picture_type, 0);
            }
            $picture_index = 0;
            $history_index = 0;
            if ($picture_type == 'picturehistory') {
                $history_index = $picture_info[1];
                $picture_index = $picture_info[2];
            } elseif ($picture_type == 'picturesnapshot') {
                $history_index = 0;
                $picture_index = $picture_info[1];
            }
            if ($this->GetPictureDebug()) {
                $this->SendDebug('Picture Index:', $picture_index, 0);
            }
            $file_extension = $picture[1];
            if ($this->GetPictureDebug()) {
                $this->SendDebug('File Extension:', $file_extension, 0);
            }
            $this->GetPictureFromMedia($picture_type, $history_index, $file_extension, $picture_index);
        } elseif ($script_name == '/slideshowhistory') {
            $html = $this->GetSlideShow('slideshowhistory');
            echo $html;
        } elseif ($script_name == '/slideshowhistory2') {
            $html = $this->GetSlideShow('slideshowhistory2');
            echo $html;
        } elseif ($script_name == '/slideshowhistory3') {
            $html = $this->GetSlideShow('slideshowhistory3');
            echo $html;
        } elseif ($script_name == '/slideshowhistory4') {
            $html = $this->GetSlideShow('slideshowhistory4');
            echo $html;
        }elseif ($script_name == '/slideshowhistory5') {
            $html = $this->GetSlideShow('slideshowhistory5');
            echo $html;
        }elseif ($script_name == '/slideshowhistory6') {
            $html = $this->GetSlideShow('slideshowhistory6');
            echo $html;
        }elseif ($script_name == '/slideshowsnapshot') {
            $html = $this->GetSlideShow('slideshowsnapshot');
            echo $html;
        } elseif ($script_name == '/cssslideshow' || $script_name == '/cssslideshow/' || $script_name == '/cssslideshow/css-fadeshow.css' || $script_name == '/cssslideshow/css-fadeshow.css/') {
            $html = $this->GetSlideShowCSS($script_name);
            echo $html;
        } else {
            echo 'Webhook Doorbird IP-Symcon';
        }

        //workaround for bug
        if (!isset($_IPS)) {
            global $_IPS;
        }
        if ($_IPS['SENDER'] == 'Execute') {
            echo 'This script cannot be used this way.';
            return;
        }
        //Auswerten von Events von Doorbird
        // Doorbird nutzt GET
        if (isset($_GET['doorbirdevent'])) {
            $this->SendDebug('Doorbird:', json_encode($_GET), 0);
            $data = $_GET['doorbirdevent'];
            if ($data == 'doorbell1') {
                $this->SetLastRingtone(1);
            } elseif ($data == 'doorbell2') {
                $this->SetLastRingtone(2);
            } elseif ($data == 'doorbell3') {
                $this->SetLastRingtone(3);
            }elseif ($data == 'doorbell4') {
                $this->SetLastRingtone(4);
            }elseif ($data == 'doorbell5') {
                $this->SetLastRingtone(5);
            }elseif ($data == 'doorbell6') {
                $this->SetLastRingtone(6);
            }elseif ($data == 'motionsensor') {
                $this->SetLastMovement();
            } elseif ($data == 'dooropen1') {
                $this->SetLastDoorOpen(1);
            } elseif ($data == 'dooropen2') {
                $this->SetLastDoorOpen(2);
            }
        }
    }

    protected function GetSlideShowCSS($script_name): void
    {
        $root = realpath(__DIR__ . '/www');
        // $this->SendDebug('Root Path:', $root, 0);

        //reduce any relative paths. this also checks for file existence
        // $script_name = substr($_SERVER['SCRIPT_NAME'], strlen("/hook/doorbird". $this->InstanceID));

        $path = realpath($root . '/css');
        // $this->SendDebug('Path:', $path, 0);
        if ($path === false) {
            http_response_code(404);
            die('File not found!');
        }

        if (substr($path, 0, strlen($root)) != $root) {
            http_response_code(403);
            die('Security issue. Cannot leave root folder!');
        }
        $this->SendDebug('CSS Scriptname:', $script_name, 0);
        //check dir existence
        if (substr($script_name, -1) != '/') {
            if (is_dir($path)) {
                http_response_code(301);
                header('Location: ' . $_SERVER['SCRIPT_NAME'] . "/\r\n\r\n");
                return;
            }
        }

        //append css
        if ($script_name == '/cssslideshow/css-fadeshow.css' || $script_name == '/cssslideshow/css-fadeshow.css/' || $script_name == '/cssslideshow/') {
            if (file_exists($path . DIRECTORY_SEPARATOR . 'css-fadeshow.css')) {
                $path .= DIRECTORY_SEPARATOR . 'css-fadeshow.css';
            } elseif (file_exists($path . DIRECTORY_SEPARATOR . 'index.php')) {
                $path .= DIRECTORY_SEPARATOR . 'index.php';
            }
        }
        $this->SendDebug('Path:', $path, 0);
        $extension = pathinfo($path, PATHINFO_EXTENSION);
        $this->SendDebug('Extension:', $extension, 0);

        if ($extension == 'php') {
            include_once $path;
        } else {
            $mimeType = $this->GetMimeType($extension);
            header('Content-Type: ' . $mimeType);

            //Add caching support
            $etag = md5_file($path);
            header('ETag: ' . $etag);
            if (isset($_SERVER['HTTP_IF_NONE_MATCH']) && (trim($_SERVER['HTTP_IF_NONE_MATCH']) == $etag)) {
                http_response_code(304);
                return;
            }

            //Add gzip compression
            if (strstr($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') && $this->IsCompressionAllowed($mimeType)) {
                $compressed = gzencode(file_get_contents($path));
                header('Content-Encoding: gzip');
                header('Content-Length: ' . strlen($compressed));
                echo $compressed;
            } else {
                header('Content-Length: ' . filesize($path));
                readfile($path);
            }
        }
    }

    protected function GetSlideShow($slideshow_type)
    {
        $this->SendDebug('Get Slides', $slideshow_type, 0);
        $counter = $this->ReadPropertyBoolean('counter');
        $autoplay = $this->ReadPropertyBoolean('autoplay');
        $ken_burns = $this->ReadPropertyBoolean('ken_burns');
        $option_slide_counter = '';
        if ($counter) {
            $option_slide_counter = 'slide-counter';
        }
        $option_autoplay = '';
        if ($autoplay) {
            $option_autoplay = 'autoplay';
        }
        $option_ken_burns = '';
        if ($ken_burns) {
            $option_ken_burns = 'ken-burns';
        }
        $category_id = 0;
        $media_objects = [];
        if ($slideshow_type == 'slideshowhistory') {
            $category_id = $this->ReadAttributeInteger('pictures_history');
            $media_objects = $this->GetMediaIDs($category_id);
        }
        if ($slideshow_type == 'slideshowhistory2') {
            $category_id = $this->ReadAttributeInteger('pictures_history2');
            $media_objects = $this->GetMediaIDs($category_id);
        }
        if ($slideshow_type == 'slideshowhistory3') {
            $category_id = $this->ReadAttributeInteger('pictures_history3');
            $media_objects = $this->GetMediaIDs($category_id);
        }
        if ($slideshow_type == 'slideshowhistory4') {
            $category_id = $this->ReadAttributeInteger('pictures_history3');
            $media_objects = $this->GetMediaIDs($category_id);
        }
        if ($slideshow_type == 'slideshowhistory5') {
            $category_id = $this->ReadAttributeInteger('pictures_history3');
            $media_objects = $this->GetMediaIDs($category_id);
        }
        if ($slideshow_type == 'slideshowhistory6') {
            $category_id = $this->ReadAttributeInteger('pictures_history3');
            $media_objects = $this->GetMediaIDs($category_id);
        }
        if ($slideshow_type == 'slideshowsnapshot') {
            $category_id = $this->ReadPropertyInteger('categorysnapshot');
            $media_objects = $this->GetMediaIDs($category_id);
        }
        $this->SendDebug('Category ID:', strval($category_id), 0);
        $this->SendDebug('Media IDs:', json_encode($media_objects), 0);
        $html = '<!DOCTYPE html>
<html lang="de">
<head>

  <title>Slideshow</title>

  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimal-ui">

  <link rel="stylesheet" href="http://' . $this->GetHostIP() . ':3777/hook/doorbird' . $this->InstanceID . '/cssslideshow">

  <style>
    html,
    body {
      height: 100%;
    }

    html {
      font-size: 100%;
    }

    body {
      margin: 0;
      font-family: \'Helvetica Neue\', sans-serif;
      color: #666;
      font-size: 1rem;
    }

    .container {
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
    }

    .slide-content {
      position: absolute;
      top: 5%;
      left: 50%;
      color: white;
      text-align: center;
      text-shadow: 0 0 20px rgba(0,0,0,0.5);
      z-index: 1;
      -webkit-transform: translate(-50%, -50%);
          -ms-transform: translate(-50%, -50%);
              transform: translate(-50%, -50%);
    }

    .slide-content p {
      font-size: calc(1rem + 10 * (100vw - 375px)/ (1199 - 375));
      font-weight: 100;
      margin-top: 0;
      margin-bottom: 0.5em;
    }

    h1,
    h2 {
      margin-top: 0;
      font-size: calc(2rem + 28 * (100vw - 375px)/ (1199 - 375));
      margin-bottom: 0.2em;
      font-weight: bold;
    }

    a {
      color: inherit;
      text-decoration: none;
      font-weight: bold;
    }

    a:hover {
      color: black;
    }

    @media (min-width: 1200px) {
      h1,
      h2 {
        font-size: 60px;
      }

      .slide-content p {
        font-size: 26px;
      }
      
      .slide-description p {
        font-size: 26px;
      }
    }
  </style>

</head>
<body>

  <div class="container">';

        $html .= '<div data-fadeshow="quick-nav prev-next-nav ' . $option_slide_counter . $option_autoplay . $option_ken_burns . '">';
        $html .= '
      <!-- Radio -->';
        $html .= $this->WriteRadioSection($media_objects);
        $html .= '
      <!-- Slides -->
      <div class="fs-slides">
      ';
        $html .= $this->WriteSlidesSection($media_objects, $slideshow_type);
        $html .= '
      </div>

      <!-- Quick Navigation -->
      <div class="fs-quick-nav">';
        $html .= $this->WriteQuickNavigationSection($media_objects);
        $html .= '
      </div>

      <!-- Prev Navigation -->
      <div class="fs-prev-nav">';
        $html .= $this->WritePrevNavigationSection($media_objects);
        $html .= '
      </div>

      <!-- Next Navigation -->
      <div class="fs-next-nav">';
        $html .= $this->WriteNextNavigationSection($media_objects);
        $html .= '
      </div>';

        if ($counter) {
            $html .= '<!-- Slide Counter -->
      <div class="fs-slide-counter">
        <span class="fs-slide-counter-current"></span>/<span class="fs-slide-counter-total"></span>
      </div>';
        }
        $html .= '    </div>

  </div>

</body>
</html>';
        return $html;
    }

    protected function GetMediaIDs($category_id)
    {
        $objects = IPS_GetChildrenIDs($category_id);
        $media_objects = [];
        foreach ($objects as $key => $object) {
            $object_type = IPS_GetObject($object)['ObjectType'];
            $position = IPS_GetObject($object)['ObjectPosition'];
            if ($object_type == 5) {
                if ($position > 0) {
                    $media_objects[$position] = $object;
                } else {
                    $media_objects[$key] = $object;
                }
            }
            ksort($media_objects);
        }
        return $media_objects;
    }

    protected function GetCSS()
    {
        return '';
    }

    protected function GetNumberMediaPictures($category_id)
    {
        $media_ids = $this->GetMediaIDs($category_id);
        return count($media_ids);
    }

    protected function WriteRadioSection($media_objects)
    {
        $html = '';
        foreach ($media_objects as $key => $media_object) {
            $html .= '<input type="radio" name="css-fadeshow" id="fs-slide-' . $key . '" />' . PHP_EOL;
        }
        return $html;
    }

    protected function WriteSlidesSection($media_objects, $slideshow_type)
    {
        $html = '';
        if ($slideshow_type == 'slideshowhistory') {
            $picture_name = 'picturehistory_1_';
        }
        if ($slideshow_type == 'slideshowhistory2') {
            $picture_name = 'picturehistory_2_';
        }
        if ($slideshow_type == 'slideshowhistory3') {
            $picture_name = 'picturehistory_3_';
        }
        if ($slideshow_type == 'slideshowhistory4') {
            $picture_name = 'picturehistory_4_';
        }
        if ($slideshow_type == 'slideshowhistory5') {
            $picture_name = 'picturehistory_5_';
        }
        if ($slideshow_type == 'slideshowhistory6') {
            $picture_name = 'picturehistory_6_';
        }
        if ($slideshow_type == 'slideshowsnapshot') {
            $picture_name = 'picturesnapshot_';
        }
        foreach ($media_objects as $key => $media_object) {
            $html .= '<div class="fs-slide">' . PHP_EOL;
            $html .= '<div class="fs-slide-bg" style="background-image: url(' . $this->GetWebhookURL(true) . '/' . $picture_name . $key . '.jpg);"></div>' . PHP_EOL;
            $html .= '<div class="slide-content">' . PHP_EOL;
            $html .= '<p>' . $this->GetPictureDescription($media_object) . '</p>' . PHP_EOL;
            $html .= '</div>' . PHP_EOL;
            $html .= '<!-- Other content goes here... -->' . PHP_EOL;
            $html .= '</div>' . PHP_EOL;
        }
        return $html;
    }

    protected function GetPictureDescription($media_object)
    {
        return IPS_GetObject($media_object)['ObjectInfo'];
    }

    protected function WriteQuickNavigationSection($media_objects)
    {
        $html = '';
        foreach ($media_objects as $key => $media_object) {
            $html .= '<label class="fs-quick-btn" for="fs-slide-' . $key . '"></label>' . PHP_EOL;
        }
        return $html;
    }

    protected function WritePrevNavigationSection($media_objects)
    {
        $html = '';
        foreach ($media_objects as $key => $media_object) {
            $html .= '<label class="fs-prev-btn" for="fs-slide-' . $key . '"></label>' . PHP_EOL;
        }
        return $html;
    }

    protected function WriteNextNavigationSection($media_objects)
    {
        $html = '';
        foreach ($media_objects as $key => $media_object) {
            $html .= '<label class="fs-next-btn" for="fs-slide-' . $key . '"></label>' . PHP_EOL;
        }
        return $html;
    }

    protected function GetPictureFromMedia($picture_type, $history_index, $file_extension, $picture_index)
    {
        if ($file_extension == 'jpg' || $file_extension == 'jpeg') {
            if ($picture_type == 'picturesnapshot') {
                $category_id = $this->ReadPropertyInteger('categorysnapshot');
            } elseif ($picture_type == 'picturehistory') {
                if ($history_index == 1) {
                    $category_id = $this->ReadAttributeInteger('pictures_history');
                }
                if ($history_index == 2) {
                    $category_id = $this->ReadAttributeInteger('pictures_history2');
                }
                if ($history_index == 3) {
                    $category_id = $this->ReadAttributeInteger('pictures_history3');
                }
            } else {
                $category_id = 0;
                $this->SendDebug('Wrong Picture Type:', $picture_type, 0);
            }
            if ($category_id > 0) {
                $media_objects = $this->GetMediaIDs($category_id);

                foreach ($media_objects as $key => $media_object) {
                    if ($key == $picture_index) {
                        $media_id = $media_object;
                        $mediaimage = $this->MediaImage($media_id);
                        $headhtml = $mediaimage['headhtml'];
                        $imgdata = $mediaimage['imgdata'];
                        header($headhtml);
                        echo $imgdata;
                    }
                }
            }
        }
    }

    protected function MediaImage($imageid)
    {
        if (!IPS_MediaExists($imageid)) {
            $this->SendDebug('Picture Request', 'No Media Image for ID ' . $imageid . ' found', 0);
            die('Media Image with ID (' . $imageid . ') does not exists');
        }

        $media = IPS_GetMedia($imageid);

        if ($media['MediaType'] != 1) {
            $this->SendDebug('Picture Request', 'No Media Image for ID ' . $imageid . ' found', 0);
            die('ID #' . $imageid . ' is not an image');
        }

        $imgbase64 = IPS_GetMediaContent($imageid); //liefert den Base64 kodierten Inhalt für das Medienobjekt
        $imgdata = base64_decode($imgbase64);
        $mimetype = $this->getImageMimeType($imgdata);
        $headhtml = $this->getimgheader($mimetype);
        return ['headhtml' => $headhtml, 'imgdata' => $imgdata, 'mimetype' => $mimetype];
    }

    protected function getimgheader($mimetype)
    {
        if ($mimetype == 'jpeg') {
            $header = 'Content-Type: image/jpeg';
        } elseif ($mimetype == 'png') {
            $header = 'Content-Type: image/png';
        } elseif ($mimetype == 'gif') {
            $header = 'Content-Type: image/gif';
        } elseif ($mimetype == 'bmp') {
            $header = 'Content-Type: image/bmp';
        } elseif ($mimetype == 'tiff') {
            $header = 'Content-Type: image/tiff';
        }
        return $header;
    }

    protected function getBytesFromHexString($hexdata)
    {
        for ($count = 0; $count < strlen($hexdata); $count += 2) {
            $bytes[] = chr(hexdec(substr($hexdata, $count, 2)));
        }

        return implode('', $bytes);
    }

    protected function getImageMimeType($imagedata)
    {
        $imagemimetypes = [
            'jpeg' => 'FFD8',
            'png'  => '89504E470D0A1A0A',
            'gif'  => '474946',
            'bmp'  => '424D',
            'tiff' => '4949'
            // "tiff" => "4D4D"
        ];

        foreach ($imagemimetypes as $mime => $hexbytes) {
            $bytes = $this->getBytesFromHexString($hexbytes);
            if (substr($imagedata, 0, strlen($bytes)) == $bytes) {
                return $mime;
            }
        }

        return null;
    }

    protected function AddHTTPDoorbellSchedule()
    {
        $postdata = [
            'input'  => 'doorbell',
            'param'  => '1',
            'output' => [
                [
                    'enabled'  => '1',
                    'event'    => 'notify',
                    'param'    => '',
                    'schedule' => [
                        'weekdays' => [
                            [
                                'from' => '0',
                                'to'   => '604799']]]],
                [
                    'enabled'  => '1',
                    'event'    => 'http',
                    'param'    => '0',
                    'schedule' => [
                        'weekdays' => [
                            [
                                'from' => '0',
                                'to'   => '604799']]]]]];
        $data_json = json_encode($postdata);
        return $this->AddSchedule($data_json);
    }

    protected function AddHTTPMotionSchedule()
    {
        $postdata = [
            'input'  => 'motion',
            'param'  => '',
            'output' => [
                [
                    'enabled'  => '1',
                    'event'    => 'notify',
                    'param'    => '',
                    'schedule' => [
                        'weekdays' => [
                            [
                                'from' => '0',
                                'to'   => '604799']]]],
                [
                    'enabled'  => '1',
                    'event'    => 'http',
                    'param'    => '1',
                    'schedule' => [
                        'weekdays' => [
                            [
                                'from' => '0',
                                'to'   => '604799']]]]]];
        $data_json = json_encode($postdata);
        return $this->AddSchedule($data_json);
    }

    protected function SendDoorbirdPOST(string $URL, string $data_json)
    {
        $doorbirduser = $this->ReadPropertyString('User');
        $doorbirdpassword = $this->ReadPropertyString('Password');
        $Doorbird_URL = $this->GetDoorbirdURL() . $URL;
        $this->SendDebug('Doorbird URL', $Doorbird_URL, 0);

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $Doorbird_URL);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json', 'Content-Length: ' . strlen($data_json)]);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data_json);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30); //timeout after 30 seconds
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
        curl_setopt($ch, CURLOPT_USERPWD, "$doorbirduser:$doorbirdpassword");
        $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);   //get status code
        $this->SendDebug('Doorbird Status Code', $status_code, 0);
        $result = curl_exec($ch);
        curl_close($ch);
        return $result;
    }

    protected function CreateRingCategory($ring_category)
    {
        $categoryhistory = $this->ReadPropertyInteger('categoryhistory');
        //Prüfen ob Kategorie schon existiert
        $RingPictureCategoryID = @IPS_GetObjectIDByIdent('Cat_Doorbird_Ringpicture' . $ring_category, $categoryhistory);
        if ($RingPictureCategoryID === false) {
            $RingPictureCategoryID = IPS_CreateCategory();
            IPS_SetName($RingPictureCategoryID, $this->Translate('Ring Pictures ' . $ring_category));
            IPS_SetIdent($RingPictureCategoryID, 'Cat_Doorbird_Ringpicture' . $ring_category);
            IPS_SetInfo($RingPictureCategoryID, $this->Translate('Ring Pictures ' . $ring_category));
            IPS_SetParent($RingPictureCategoryID, $categoryhistory);
        }
        $this->SendDebug('Ring Picture Category', strval($RingPictureCategoryID), 0);
        return $RingPictureCategoryID;
    }

    protected function GetIPSVersion()
    {
        $ipsversion = floatval(IPS_GetKernelVersion());
        if ($ipsversion < 4.1) { // 4.0
            $ipsversion = 0;
        } elseif ($ipsversion >= 4.1 && $ipsversion < 4.2) { // 4.1
            $ipsversion = 1;
        } elseif ($ipsversion >= 4.2 && $ipsversion < 4.3) { // 4.2
            $ipsversion = 2;
        } elseif ($ipsversion >= 4.3 && $ipsversion < 4.4) { // 4.3
            $ipsversion = 3;
        } elseif ($ipsversion >= 4.4 && $ipsversion < 5) { // 4.4
            $ipsversion = 4;
        } else {   // 5
            $ipsversion = 5;
        }

        return $ipsversion;
    }

    /**
     * return form configurations on configuration step.
     *
     * @return array
     */
    protected function FormHead()
    {
        $form = [
            [
                'type'  => 'Image',
                'image' => 'data:image/png;base64, ' . self::PICTURE_LOGO_DOORBIRD],
            [
                'type'    => 'Select',
                'name'    => 'model',
                'caption' => 'Type',
                'options' => [
                    [
                        'caption' => 'Please select a device type',
                        'value'   => 0],
                    [
                        'caption' => 'D101',
                        'value'   => self::D101],
                    [
                        'caption' => 'D101S',
                        'value'   => self::D101S],
                    [
                        'caption' => 'D202',
                        'value'   => self::D202],
                    [
                        'caption' => 'D1101UV',
                        'value'   => self::D1101UV],
                    [
                        'caption' => 'D2101V',
                        'value'   => self::D2101V],
                    [
                        'caption' => 'D2102V',
                        'value'   => self::D2102V],
                    [
                        'caption' => 'D2103V',
                        'value'   => self::D2103V],
                    [
                        'caption' => 'D2104V',
                        'value'   => self::D2104V],
                    [
                        'caption' => 'D2105V',
                        'value'   => self::D2105V],
                    [
                        'caption' => 'D2106V',
                        'value'   => self::D2106V],
                    [
                        'caption' => 'D21DKV',
                        'value'   => self::D21DKV],
                    [
                        'caption' => 'D21DKH',
                        'value'   => self::D21DKH],
                    [
                        'caption' => 'D2101KV',
                        'value'   => self::D2101KV],
                    [
                        'caption' => 'D2102KV',
                        'value'   => self::D2102KV],
                    [
                        'caption' => 'D21FPBI',
                        'value'   => self::D21FPBI],
                    [
                        'caption' => 'D2101FV',
                        'value'   => self::D2101FV],
                    [
                        'caption' => 'D2102FV',
                        'value'   => self::D2102FV],
                    [
                        'caption' => 'D2101FV EKEY',
                        'value'   => self::D2101FV_EKEY],
                    [
                        'caption' => 'D2102FV EKEY',
                        'value'   => self::D2102FV_EKEY],
                    [
                        'caption' => 'D1101V',
                        'value'   => self::D1101V],
                    [
                        'caption' => 'D1102V',
                        'value'   => self::D1102V],
                    [
                        'caption' => 'D1101KH',
                        'value'   => self::D1101KH],
                    [
                        'caption' => 'D2101KH',
                        'value'   => self::D2101KH],
                    [
                        'caption' => 'D2101IKH',
                        'value'   => self::D2101IKH],
                    [
                        'caption' => 'D2101FPBI',
                        'value'   => self::D2101FPBI],
                    [
                        'caption' => 'D2101FPBK',
                        'value'   => self::D2101FPBK],
                    [
                        'caption' => 'D2100E',
                        'value'   => self::D2100E],
                    [
                        'caption' => 'D1100E',
                        'value'   => self::D1100E]]

            ]];


        //Check if notification setup is already done. Otherwise show a button to create it
        $doorbirdreturn = $this->ReadAttributeString('schedule');
        if ($doorbirdreturn == '[]') {
            $form = array_merge_recursive(
                $form, [
                    [
                        'type'    => 'Label',
                        'caption' => 'Please fill in all fields in this form and then press the button below for the notification setup of the Doorbird for IP-Symcon'],
                    [
                        'type'    => 'Label',
                        'caption' => 'Setup notifications from doorbird to IP-Symcon'],
                    [
                        'type'      => 'Button',
                        'caption'   => 'Setup notifications from doorbird to IP-Symcon',
                        'onClick'   => 'Doorbird_SetupNotification($id);']]
            );
        }
        $form = array_merge_recursive(
            $form, [
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'Doorbird Settings',
                    'items'   => [
                        [
                            'type'    => 'Label',
                            'caption' => 'IP adress or hostname Doorbird'],
                        [
                            'name'    => 'Host',
                            'type'    => 'ValidationTextBox',
                            'caption' => 'IP Doorbird'],
                        [
                            'type'    => 'Label',
                            'caption' => 'port of Doorbell'],
                        [
                            'name'    => 'PortDoorbell',
                            'type'    => 'NumberSpinner',
                            'caption' => 'Port Doorbell']]],
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'Doorbird login credentials',
                    'items'   => [
                        [
                            'type'    => 'Label',
                            'caption' => 'Doorbird user with authorization as API-Operator'],
                        [
                            'name'    => 'User',
                            'type'    => 'ValidationTextBox',
                            'caption' => 'User'],
                        [
                            'name'    => 'Password',
                            'type'    => 'PasswordTextBox',
                            'caption' => 'Password']]],
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'Doorbird Picture Settings',
                    'items'   => [
                        [
                            'type'    => 'Label',
                            'caption' => 'category for doorbird ring pictures, please create first a category in the objekt tree of IP-Symcon and then select it in the field below'],
                        [
                            'type'    => 'Label',
                            'caption' => 'doorbird ring pictures category'],
                        [
                            'name'    => 'categoryhistory',
                            'type'    => 'SelectCategory',
                            'caption' => 'ring pictures'],
                        [
                            'type'    => 'Label',
                            'caption' => 'picture limit for doorbird ring pictures'],
                        [
                            'name'    => 'picturelimitring',
                            'type'    => 'NumberSpinner',
                            'caption' => 'limit ring pictures'],
                        [
                            'type'    => 'Label',
                            'caption' => 'category for doorbird snapshots pictures, please create first a category in the objekt tree of IP-Symcon and then select it in the field below'],
                        [
                            'type'    => 'Label',
                            'caption' => 'doorbird snapshot pictures category'],
                        [
                            'name'    => 'categorysnapshot',
                            'type'    => 'SelectCategory',
                            'caption' => 'snapshot pictures'],
                        [
                            'type'    => 'Label',
                            'caption' => 'picture limit for doorbird snapshots pictures'],
                        [
                            'name'    => 'picturelimitsnapshot',
                            'type'    => 'NumberSpinner',
                            'caption' => 'limit snapshots']]],
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'Doorbird Video Settings',
                    'items'   => [
                        [
                            'name'    => 'iframe_width_video',
                            'type'    => 'NumberSpinner',
                            'caption' => 'iframe width (px)'],
                        [
                            'name'    => 'iframe_height_video',
                            'type'    => 'NumberSpinner',
                            'caption' => 'iframe height (px)']
                    ]],
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'Doorbird Slideview Settings',
                    'items'   => [
                        [
                            'type'    => 'Label',
                            'caption' => 'show a slide show of the pictures of motion detection on the WebFront'],
                        [
                            'name'    => 'slideshow_snapshot',
                            'type'    => 'CheckBox',
                            'caption' => 'Enable variable for slide show motion detection'],
                        [
                            'name'    => 'iframe_width_snapshot',
                            'type'    => 'NumberSpinner',
                            'caption' => 'iframe width (px)'],
                        [
                            'name'    => 'iframe_height_snapshot',
                            'type'    => 'NumberSpinner',
                            'caption' => 'iframe height (px)'],
                        [
                            'type'    => 'Label',
                            'caption' => 'Show a slide show of visitors on the WebFront'],
                        [
                            'name'    => 'slideshow_history',
                            'type'    => 'CheckBox',
                            'caption' => 'Enable variable for slide show history'],
                        [
                            'name'    => 'iframe_width_history',
                            'type'    => 'NumberSpinner',
                            'caption' => 'iframe width (px)'],
                        [
                            'name'    => 'iframe_height_history',
                            'type'    => 'NumberSpinner',
                            'caption' => 'iframe height (px)']
                    ]],
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'IP Symcon Settings',
                    'items'   => [
                        [
                            'type'    => 'Label',
                            'caption' => 'IP adress IP-Symcon Server'],
                        [
                            'name'    => 'IPSIP',
                            'type'    => 'ValidationTextBox',
                            'caption' => 'IP adress'],
                        [
                            'type'    => 'Label',
                            'caption' => 'port of IP-Symcon'],
                        [
                            'name'    => 'PortIPS',
                            'type'    => 'NumberSpinner',
                            'caption' => 'Port IPS']]],
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'notification preferences',
                    'items'   => [
                        [
                            'type'    => 'Label',
                            'caption' => 'parameter relaxation:  min 10s max 10000s'],
                        [
                            'type'    => 'Label',
                            'caption' => 'notification activ for:'],
                        [
                            'name'    => 'doorbell',
                            'type'    => 'CheckBox',
                            'caption' => 'doorbell'],
                        [
                            'type'    => 'Label',
                            'caption' => 'Relaxation time for doorbell (seconds)'],
                        [
                            'name'    => 'relaxationdoorbell',
                            'type'    => 'NumberSpinner',
                            'caption' => 'relaxation (s)'],
                        [
                            'name'    => 'motionsensor',
                            'type'    => 'CheckBox',
                            'caption' => 'motionsensor'],
                        [
                            'type'    => 'Label',
                            'caption' => 'Relaxation time for motionsensor (seconds)'],
                        [
                            'name'    => 'relaxationmotionsensor',
                            'type'    => 'NumberSpinner',
                            'caption' => 'relaxation (s)'],
                        [
                            'name'    => 'dooropen',
                            'type'    => 'CheckBox',
                            'caption' => 'door open'],
                        [
                            'type'    => 'Label',
                            'caption' => 'Relaxation time for dooropen (seconds)'],
                        [
                            'name'    => 'relaxationdooropen',
                            'type'    => 'NumberSpinner',
                            'caption' => 'relaxation (s)']]]]
        );
        $form = array_merge_recursive(
            $form, [
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'email notification settings',
                    'items'   => $this->FormShowEmail()]]
        );
        $form = array_merge_recursive(
            $form, [
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'alternative view',
                    'items'   => [
                        [
                            'type'    => 'Label',
                            'caption' => 'if there are problems with the live image in the WebFront you can active alterative view'],
                        [
                            'name'    => 'altview',
                            'type'    => 'CheckBox',
                            'caption' => 'alternative view']]],
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'IP Symcon Webhook Settings',
                    'items'   => [
                        [
                            'type'    => 'Label',
                            'caption' => 'Connection from Doorbird to IP-Symcon'],
                        [
                            'type'    => 'Label',
                            'caption' => 'authentication for Doorbird webhook'],
                        [
                            'name'    => 'webhookusername',
                            'type'    => 'ValidationTextBox',
                            'caption' => 'username'],
                        [
                            'name'    => 'webhookpassword',
                            'type'    => 'PasswordTextBox',
                            'caption' => 'Password']]]]
        );
        $form = array_merge_recursive(
            $form, [
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'Doorbird Favorites',
                    'items'   => $this->FormShowFavorites()]]
        );
        $form = array_merge_recursive(
            $form, [
                /*
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'Doorbird Schedule',
                    'items'   => $this->FormShowSchedule()],
                */
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'WebFront Doorbird App',
                    'items'   => [
                        [
                            'type'    => 'Label',
                            'caption' => 'when viewing the WebFront in a browser on an iOS or Android device, the Doorbird app can be optionally started from the WebFront to talk to the visitor'],
                        [
                            'name'    => 'doorbird_app',
                            'type'    => 'CheckBox',
                            'caption' => 'Enable Variable for launching the Doorbird App']
                    ]]]
        );
        $form = array_merge_recursive(
            $form, [
                [
                    'type'    => 'ExpansionPanel',
                    'caption' => 'Doorbird Web Admin',
                    'items'   => [
                        [
                            'type'      => 'Button',
                            'caption'   => 'open Doorbird Webadmin',
                            'onClick'   => 'echo \'https://webadmin.doorbird.com\';'],
                        [
                            'type'    => 'Label',
                            'caption' => 'show Doorbird Webadmin on the WebFront'],
                        [
                            'name'    => 'webadmin',
                            'type'    => 'CheckBox',
                            'caption' => 'Enable variable for Webadmin'],
                        [
                            'name'    => 'iframe_width_webadmin',
                            'type'    => 'NumberSpinner',
                            'caption' => 'iframe width (px)'],
                        [
                            'name'    => 'iframe_height_webadmin',
                            'type'    => 'NumberSpinner',
                            'caption' => 'iframe height (px)']
                    ]]]
        );
        return $form;
    }

    protected function FormShowFavorites()
    {
        $result = $this->GetFavorites();
        $sip = [];
        $http = [];
        $rowcount_sip = 1;
        $rowcount_http = 1;
        if ($result) {
            $data = json_decode($result, true);
            if (isset($data['sip'])) {
                $sip = $data['sip'];
                $rowcount_sip = count($sip);
            } else {
                $rowcount_sip = 1;
            }
            if (isset($data['http'])) {
                $http = $data['http'];
                $rowcount_http = count($http);
            } else {
                $rowcount_http = 1;
            }
        }
        $form = [
            [
                'type'     => 'List',
                'name'     => 'list_sip',
                'caption'  => 'SIP Numbers',
                'rowCount' => $rowcount_sip,
                'add'      => false,
                'delete'   => false,
                'sort'     => [
                    'column'    => 'ID',
                    'direction' => 'ascending'
                ],
                'columns' => [
                    [
                        'name'    => 'ID',
                        'caption' => 'ID',
                        'width'   => '100px',
                        'visible' => true
                    ],
                    [
                        'name'    => 'Title',
                        'caption' => 'Title',
                        'width'   => '370px',
                        'visible' => true
                    ],
                    [
                        'name'    => 'Value',
                        'caption' => 'Value',
                        'width'   => 'auto',
                        'visible' => true
                    ]
                ],
                'values' => $this->Get_SIPListConfiguration($sip)
            ],
            [
                'type'     => 'List',
                'name'     => 'list_favorites',
                'caption'  => 'HTTP(S) Calls',
                'rowCount' => $rowcount_http,
                'add'      => false,
                'delete'   => false,
                'sort'     => [
                    'column'    => 'ID',
                    'direction' => 'ascending'
                ],
                'columns' => [
                    [
                        'name'    => 'ID',
                        'caption' => 'ID',
                        'width'   => '100px',
                        'visible' => true
                    ],
                    [
                        'name'    => 'Title',
                        'caption' => 'Title',
                        'width'   => '370px',
                        'visible' => true
                    ],
                    [
                        'name'    => 'Value',
                        'caption' => 'Value',
                        'width'   => 'auto',
                        'visible' => true
                    ]
                ],
                'values' => $this->Get_HTTPListConfiguration($http)
            ]
        ];
        return $form;
    }

    protected function FormShowSchedule()
    {
        $schedule = $this->GetSchedule();
        $rowcount_schedule = 1;
        $schedule_data = [];
        if ($schedule != '') {
            $schedule_data = json_decode($schedule);
            if (is_null($schedule_data)) {
                $this->SendDebug('Doorbird', 'could not get schedule', 0);
            } else {
                $rowcount_schedule = count($schedule_data) + 5;
            }
        }
        $form = [
            [
                'type'     => 'Tree',
                'name'     => 'list_schedule',
                'caption'  => 'Doorbird Schedule',
                'rowCount' => $rowcount_schedule,
                'add'      => false,
                'delete'   => false,
                'sort'     => [
                    'column'    => 'ident',
                    'direction' => 'ascending'
                ],
                'columns' => [
                    [
                        'name'    => 'ident',
                        'caption' => 'Ident',
                        'width'   => '70px',
                        'visible' => true
                    ],
                    [
                        'name'    => 'input',
                        'caption' => 'Input',
                        'width'   => '150px',
                        'visible' => true
                    ],
                    [
                        'name'    => 'inputparam',
                        'caption' => 'Input Param',
                        'width'   => '150px',
                        'visible' => true
                    ],
                    [
                        'name'    => 'outputevent',
                        'caption' => 'Output Event',
                        'width'   => '150px',
                    ],
                    [
                        'name'    => 'outputparam',
                        'caption' => 'Output Param',
                        'width'   => '150px',
                    ],
                    [
                        'name'    => 'schedule_type',
                        'caption' => 'Schedule Type',
                        'width'   => '150px',
                    ],
                    [
                        'name'    => 'schedule_interval',
                        'caption' => 'Interval',
                        'width'   => 'auto',
                    ]
                ],
                'values' => $this->Get_ScheduleListConfiguration($schedule_data)
            ]
        ];
        return $form;
    }

    protected function FormShowEmail()
    {
        $activeemail2 = $this->ReadPropertyBoolean('activeemail2');
        $activeemail3 = $this->ReadPropertyBoolean('activeemail3');
        $activeemail4 = $this->ReadPropertyBoolean('activeemail4');
        $activeemail5 = $this->ReadPropertyBoolean('activeemail5');
        $activeemail6 = $this->ReadPropertyBoolean('activeemail6');
        $activeemail7 = $this->ReadPropertyBoolean('activeemail7');
        $activeemail8 = $this->ReadPropertyBoolean('activeemail8');
        $activeemail9 = $this->ReadPropertyBoolean('activeemail9');
        $activeemail10 = $this->ReadPropertyBoolean('activeemail10');
        $activeemail11 = $this->ReadPropertyBoolean('activeemail11');
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'optionally notification via email (configurated SMTP module required)'],
            [
                'type'    => 'Label',
                'caption' => 'active email notification'],
            [
                'name'    => 'activeemail',
                'type'    => 'CheckBox',
                'caption' => 'active email'],
            [
                'name'    => 'smtpmodule',
                'type'    => 'SelectInstance',
                'caption' => 'SMTP module'],
            [
                'type'    => 'Label',
                'caption' => 'notification email adress'],
            [
                'name'    => 'email',
                'type'    => 'ValidationTextBox',
                'caption' => 'email'],
            [
                'type'    => 'Label',
                'caption' => 'email subject'],
            [
                'name'    => 'subject',
                'type'    => 'ValidationTextBox',
                'caption' => 'subject'],
            [
                'type'    => 'Label',
                'caption' => 'email text'],
            [
                'name'    => 'emailtext',
                'type'    => 'ValidationTextBox',
                'caption' => 'email text'],
            [
                'name'    => 'activeemail2',
                'type'    => 'CheckBox',
                'caption' => 'active email 2']];
        if ($activeemail2) {
            $form = array_merge_recursive(
                $form, [
                    [
                        'name'    => 'smtpmodule2',
                        'type'    => 'SelectInstance',
                        'caption' => 'SMTP module'],
                    [
                        'type'    => 'Label',
                        'caption' => 'notification email adress'],
                    [
                        'name'    => 'email2',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email subject'],
                    [
                        'name'    => 'subject2',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'subject'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email text'],
                    [
                        'name'    => 'emailtext2',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email text'],
                    [
                        'name'    => 'activeemail3',
                        'type'    => 'CheckBox',
                        'caption' => 'active email 3']]
            );
        }
        if ($activeemail3) {
            $form = array_merge_recursive(
                $form, [
                    [
                        'name'    => 'smtpmodule3',
                        'type'    => 'SelectInstance',
                        'caption' => 'SMTP module'],
                    [
                        'type'    => 'Label',
                        'caption' => 'notification email adress'],
                    [
                        'name'    => 'email3',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email subject'],
                    [
                        'name'    => 'subject3',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'subject'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email text'],
                    [
                        'name'    => 'emailtext3',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email text'],
                    [
                        'name'    => 'activeemail4',
                        'type'    => 'CheckBox',
                        'caption' => 'active email 4']]
            );
        }
        if ($activeemail4) {
            $form = array_merge_recursive(
                $form, [
                    [
                        'name'    => 'smtpmodule4',
                        'type'    => 'SelectInstance',
                        'caption' => 'SMTP module'],
                    [
                        'type'    => 'Label',
                        'caption' => 'notification email adress'],
                    [
                        'name'    => 'email4',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email subject'],
                    [
                        'name'    => 'subject4',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'subject'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email text'],
                    [
                        'name'    => 'emailtext4',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email text'],
                    [
                        'name'    => 'activeemail5',
                        'type'    => 'CheckBox',
                        'caption' => 'active email 5']]
            );
        }
        if ($activeemail5) {
            $form = array_merge_recursive(
                $form, [
                    [
                        'name'    => 'smtpmodule5',
                        'type'    => 'SelectInstance',
                        'caption' => 'SMTP module'],
                    [
                        'type'    => 'Label',
                        'caption' => 'notification email adress'],
                    [
                        'name'    => 'email5',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email subject'],
                    [
                        'name'    => 'subject5',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'subject'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email text'],
                    [
                        'name'    => 'emailtext5',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email text'],
                    [
                        'name'    => 'activeemail6',
                        'type'    => 'CheckBox',
                        'caption' => 'active email 6']]
            );
        }
        if ($activeemail6) {
            $form = array_merge_recursive(
                $form, [
                    [
                        'name'    => 'smtpmodule6',
                        'type'    => 'SelectInstance',
                        'caption' => 'SMTP module'],
                    [
                        'type'    => 'Label',
                        'caption' => 'notification email adress'],
                    [
                        'name'    => 'email6',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email subject'],
                    [
                        'name'    => 'subject6',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'subject'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email text'],
                    [
                        'name'    => 'emailtext6',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email text'],
                    [
                        'name'    => 'activeemail7',
                        'type'    => 'CheckBox',
                        'caption' => 'active email 7']]
            );
        }
        if ($activeemail7) {
            $form = array_merge_recursive(
                $form, [
                    [
                        'name'    => 'smtpmodule7',
                        'type'    => 'SelectInstance',
                        'caption' => 'SMTP module'],
                    [
                        'type'    => 'Label',
                        'caption' => 'notification email adress'],
                    [
                        'name'    => 'email7',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email subject'],
                    [
                        'name'    => 'subject7',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'subject'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email text'],
                    [
                        'name'    => 'emailtext7',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email text'],
                    [
                        'name'    => 'activeemail8',
                        'type'    => 'CheckBox',
                        'caption' => 'active email 8']]
            );
        }
        if ($activeemail8) {
            $form = array_merge_recursive(
                $form, [
                    [
                        'name'    => 'smtpmodule8',
                        'type'    => 'SelectInstance',
                        'caption' => 'SMTP module'],
                    [
                        'type'    => 'Label',
                        'caption' => 'notification email adress'],
                    [
                        'name'    => 'email8',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email subject'],
                    [
                        'name'    => 'subject8',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'subject'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email text'],
                    [
                        'name'    => 'emailtext8',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email text'],
                    [
                        'name'    => 'activeemail9',
                        'type'    => 'CheckBox',
                        'caption' => 'active email 9']]
            );
        }
        if ($activeemail9) {
            $form = array_merge_recursive(
                $form, [
                    [
                        'name'    => 'smtpmodule9',
                        'type'    => 'SelectInstance',
                        'caption' => 'SMTP module'],
                    [
                        'type'    => 'Label',
                        'caption' => 'notification email adress'],
                    [
                        'name'    => 'email9',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email subject'],
                    [
                        'name'    => 'subject9',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'subject'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email text'],
                    [
                        'name'    => 'emailtext9',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email text'],
                    [
                        'name'    => 'activeemail10',
                        'type'    => 'CheckBox',
                        'caption' => 'active email 10']]
            );
        }
        if ($activeemail10) {
            $form = array_merge_recursive(
                $form, [
                    [
                        'name'    => 'smtpmodule10',
                        'type'    => 'SelectInstance',
                        'caption' => 'SMTP module'],
                    [
                        'type'    => 'Label',
                        'caption' => 'notification email adress'],
                    [
                        'name'    => 'email10',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email subject'],
                    [
                        'name'    => 'subject10',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'subject'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email text'],
                    [
                        'name'    => 'emailtext10',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email text'],
                    [
                        'name'    => 'activeemail11',
                        'type'    => 'CheckBox',
                        'caption' => 'active email 11']]
            );
        }
        if ($activeemail11) {
            $form = array_merge_recursive(
                $form, [
                    [
                        'name'    => 'smtpmodule11',
                        'type'    => 'SelectInstance',
                        'caption' => 'SMTP module'],
                    [
                        'type'    => 'Label',
                        'caption' => 'notification email adress'],
                    [
                        'name'    => 'email11',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email subject'],
                    [
                        'name'    => 'subject11',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'subject'],
                    [
                        'type'    => 'Label',
                        'caption' => 'email text'],
                    [
                        'name'    => 'emailtext11',
                        'type'    => 'ValidationTextBox',
                        'caption' => 'email text']]
            );
        }
        return $form;
    }

    /**
     * return form actions by token.
     *
     * @return array
     */
    protected function FormActions()
    {
        $form = [
            [
                'type'    => 'Label',
                'caption' => 'Setup notifications from doorbird to IP-Symcon'],
            [
                'type'      => 'Button',
                'caption'   => 'Setup Notification',
                'onClick'   => 'Doorbird_SetupNotification($id);'],
            [
                'type'    => 'Label',
                'caption' => 'Get buildnumber, WLAN MAC and firmwareversion of Doorbird'],
            [
                'type'      => 'Button',
                'caption'   => 'get info',
                'onClick'   => 'Doorbird_GetInfo($id);'],
            [
                'type'    => 'Label',
                'caption' => 'Get snapshot from the doorbird camera'],
            [
                'type'      => 'Button',
                'caption'   => 'get snapshoot',
                'onClick'   => 'Doorbird_GetSnapshot($id);'],
            [
                'type'      => 'Button',
                'caption'   => 'open door',
                'onClick'   => 'Doorbird_OpenDoor($id);'],
            [
                'type'    => 'Label',
                'caption' => 'turn on ir light of doorbird'],
            [
                'type'      => 'Button',
                'caption'   => 'ir light',
                'onClick'   => 'Doorbird_Light($id);']];

        return $form;
    }

    /**
     * return from status.
     *
     * @return array
     */
    protected function FormStatus()
    {
        $form = [
            [
                'code'    => IS_CREATING,
                'icon'    => 'inactive',
                'caption' => 'Creating instance.'],
            [
                'code'    => IS_ACTIVE,
                'icon'    => 'active',
                'caption' => 'Doorbird accessible.'],
            [
                'code'    => IS_INACTIVE,
                'icon'    => 'inactive',
                'caption' => 'interface closed.'],
            [
                'code'    => 201,
                'icon'    => 'inactive',
                'caption' => 'Please follow the instructions.'],
            [
                'code'    => 202,
                'icon'    => 'error',
                'caption' => 'Doorbird IP adress must not empty.'],
            [
                'code'    => 203,
                'icon'    => 'error',
                'caption' => 'No valid IP adress or host.'],
            [
                'code'    => 204,
                'icon'    => 'error',
                'caption' => 'connection to Doorbird lost.'],
            [
                'code'    => 205,
                'icon'    => 'error',
                'caption' => 'field must not be empty.'],
            [
                'code'    => 206,
                'icon'    => 'error',
                'caption' => 'category must not be empty.'],
            [
                'code'    => 207,
                'icon'    => 'error',
                'caption' => 'email not valid.'],
            [
                'code'    => 208,
                'icon'    => 'error',
                'caption' => 'category doorbird snapshot not set.'],
            [
                'code'    => 209,
                'icon'    => 'error',
                'caption' => 'category doorbird history not set.'],
            [
                'code'    => 210,
                'icon'    => 'error',
                'caption' => 'doorbird user not set.'],
            [
                'code'    => 211,
                'icon'    => 'error',
                'caption' => 'doorbird password not set.'],
            [
                'code'    => 212,
                'icon'    => 'error',
                'caption' => 'webhook user not set.'],
            [
                'code'    => 213,
                'icon'    => 'error',
                'caption' => 'webhook password not set.'],
            [
                'code'    => 214,
                'icon'    => 'error',
                'caption' => 'email not set.'],
            [
                'code'    => 215,
                'icon'    => 'error',
                'caption' => 'Could not connect. Please check the Doorbird password.'],
            [
                'code'    => 216,
                'icon'    => 'error',
                'caption' => 'Could not connect. Please check the Doorbird username.'],
            [
                'code'    => 217,
                'icon'    => 'error',
                'caption' => 'the user has no authority as an API operator. Please make sure that the user who has been deposited in IP-Symcon has been assigned API operator rights.'],
            [
                'code'    => 218,
                'icon'    => 'error',
                'caption' => 'No valid Doorbird IP adress or host.'],
            [
                'code'    => 219,
                'icon'    => 'error',
                'caption' => 'No valid IP-Symcon IP adress or host.']];

        return $form;
    }

    //Add this Polyfill for IP-Symcon 4.4 and older
    protected function SetValue($Ident, $Value)
    {
        if (IPS_GetKernelVersion() >= 5) {
            parent::SetValue($Ident, $Value);
        } else {
            SetValue($this->GetIDForIdent($Ident), $Value);
        }
    }

    private function CheckExistence($ident)
    {
        $objectid = @$this->GetIDForIdent($ident);
        if ($objectid == false) {
            $exist = false;
        } else {
            $exist = true;
        }
        return $exist;
    }

    private function SetIcon($ident, $icon, $exist)
    {
        $icon_exist = false;
        if ($exist == false) {
            $icon_exist = IPS_SetIcon($this->GetIDForIdent($ident), $icon);
        }

        return $icon_exist;
    }

    /**
     * Die folgenden Funktionen stehen automatisch zur Verfügung, wenn das Modul über die 'Module Control' eingefügt wurden.
     * Die Funktionen werden, mit dem selbst eingerichteten Prefix, in PHP und JSON-RPC wiefolgt zur Verfügung gestellt.
     */
    private function ValidateConfiguration()
    {
        $hostdoorbell = $this->ReadPropertyString('Host');
        $this->SendDebug('Doorbird', 'Doorbird adress: ' . $hostdoorbell, 0);
        $hostips = $this->ReadPropertyString('IPSIP');
        $this->SendDebug('Doorbird', 'IP Symcon IP: ' . $hostips, 0);
        $doorbirduser = $this->ReadPropertyString('User');
        $this->SendDebug('Doorbird', 'Doorbird User: ' . $doorbirduser, 0);
        $password = $this->ReadPropertyString('Password');
        $this->SendDebug('Doorbird', 'Password: ' . $password, 0);
        /*
         $doorbirduser_1 = $this->ReadPropertyString('User_1');
         $this->SendDebug('Doorbird', 'Doorbird User 1: ' . $doorbirduser_1, 0);
         $password_1 = $this->ReadPropertyString('Password_1');
         $this->SendDebug('Doorbird', 'Password User 1: ' . $password_1, 0);
         */
        $portdoorbell = $this->ReadPropertyInteger('PortDoorbell');
        $this->SendDebug('Doorbird', 'Port: ' . $portdoorbell, 0);
        $webhookusername = $this->ReadPropertyString('webhookusername');
        $this->SendDebug('Doorbird', 'Webhook User: ' . $webhookusername, 0);
        $webhookpassword = $this->ReadPropertyString('webhookpassword');
        $this->SendDebug('Doorbird', 'Webhook Password: ' . $webhookpassword, 0);

        //IP Doorbell prüfen
        if (!filter_var($hostdoorbell, FILTER_VALIDATE_IP) === false) {
            //IP ok
            $ipcheckdoorbird = true;
        } else {
            $ipcheckdoorbird = false;
            $this->SendDebug('Doorbird', 'ip check Doorbird failed', 0);
        }

        //IP IP-Symcon prüfen
        if (!filter_var($hostips, FILTER_VALIDATE_IP) === false) {
            //IP ok
            $ipcheckips = true;
        } else {
            $ipcheckips = false;
            $this->SendDebug('Doorbird', 'ip check IP-Symcon failed', 0);
        }

        //Domain Doorbell prüfen
        if (!$this->is_valid_localdomain($hostdoorbell) === false) {
            //Domain ok
            $domaincheckdoorbell = true;
        } else {
            $domaincheckdoorbell = false;
        }

        //Domain IP-Symcon prüfen
        if (!$this->is_valid_domain($hostips) === false) {
            //Domain ok
            $domaincheckips = true;
        } else {
            $domaincheckips = false;
        }

        if (($domaincheckdoorbell === true || $ipcheckdoorbird === true) && ($domaincheckips === true || $ipcheckips === true)) {
            $hostcheck = true;
        } else {
            $hostcheck = false;
            if ($domaincheckdoorbell === false && $ipcheckdoorbird === false) {
                $this->SendDebug('Doorbird', 'Doorbird host not valid', 0);
                $this->SetStatus(218); //IP Adresse oder Host ist ungültig
            } elseif ($domaincheckips === false && $ipcheckips === false) {
                $this->SendDebug('Doorbird', 'IP-Symcon host not valid', 0);
                $this->SetStatus(219); //IP Adresse oder Host ist ungültig
            }
        }

        //User und Passwort prüfen
        if ($doorbirduser == '') {
            $this->SendDebug('Doorbird', 'doorbird user field must not be empty', 0);
            $this->SetStatus(210); //Felder dürfen nicht leer sein
        }
        if ($password == '') {
            $this->SendDebug('Doorbird', 'doorbird password field must not be empty', 0);
            $this->SetStatus(211); //Felder dürfen nicht leer sein
        }
        if ($webhookusername == '') {
            $this->SendDebug('Doorbird', 'webhook user field must not be empty', 0);
            $this->SetStatus(212); //Felder dürfen nicht leer sein
        }
        if ($webhookpassword == '') {
            $this->SendDebug('Doorbird', 'webhook password field must not be empty', 0);
            $this->SetStatus(213); //Felder dürfen nicht leer sein
        }
        if ($doorbirduser !== '' && $password !== '' && $hostcheck === true) {
            $selectionaltview = $this->ReadPropertyBoolean('altview');
            $prefix = $this->GetURLPrefix($hostdoorbell);
            if ($selectionaltview) {
                $DoorbirdVideoHTML =
                    '<img src="' . $prefix . $hostdoorbell . ':' . $portdoorbell . self::LIVE_VIDEO_REQUEST . '?http-user=' . $doorbirduser . '&http-password='
                    . $password . '" style=width:' . $this->ReadPropertyInteger('iframe_width_video') . 'px; height:' . $this->ReadPropertyInteger('iframe_height_video') . 'px; >';
            } else {
                $DoorbirdVideoHTML = '<iframe src="' . $prefix . $hostdoorbell . ':' . $portdoorbell . self::LIVE_VIDEO_REQUEST . '?http-user=' . $doorbirduser
                                     . '&http-password=' . $password . '"  width=' . $this->ReadPropertyInteger('iframe_width_video') . 'px; height=' . $this->ReadPropertyInteger('iframe_height_video') . 'px; ></iframe>';
            }
            $this->SetValue('DoorbirdVideo', $DoorbirdVideoHTML);

            $ipsversion = $this->GetIPSVersion();
            if ($ipsversion == 0) {
                //prüfen ob Script existent
                $SkriptID = @IPS_GetObjectIDByIdent('DoorbirdIPSInterface', $this->InstanceID);
                if ($SkriptID === false) {
                    $ID = $this->RegisterScript('DoorbirdIPSInterface', 'Doorbird IPS Interface', $this->CreateWebHookScript(), 19);
                    IPS_SetHidden($ID, true);
                    $this->RegisterHookOLD('/hook/doorbird' . $this->InstanceID, $ID);
                } else {
                    $this->SendDebug('Doorbird', 'Webhookscript mit ' . $SkriptID . ' gefunden', 0);
                }
            } else {
                $SkriptID = @IPS_GetObjectIDByIdent('DoorbirdIPSInterface', $this->InstanceID);
                if ($SkriptID > 0) {
                    $this->UnregisterHook('/hook/doorbird' . $this->InstanceID);
                    $this->UnregisterScript('DoorbirdIPSInterface');
                }
                $this->RegisterHook('/hook/doorbird' . $this->InstanceID);
            }

            // Kategorie prüfen
            $category_snapshot = $this->ReadPropertyInteger('categorysnapshot');
            $category_history = $this->ReadPropertyInteger('categoryhistory');
            if ($category_snapshot > 0) {
                $this->SendDebug('Doorbird', 'Kategorie mit ObjektID ' . $category_snapshot . ' gefunden', 0);
            } else {
                $this->SendDebug('Doorbird', 'category snapshot not set', 0);
                $this->SetStatus(208); //category doorbird snapshot not set
            }
            if ($category_history > 0) {
                $this->SendDebug('Doorbird', 'Kategorie mit ObjektID ' . $category_history . ' gefunden', 0);
            } else {
                $this->SetStatus(209); //category doorbird history not set
            }
            //Timer für Historie
            // Ersetzt durch Event das Bilder bei Klingeln abholt
            /*
             $timerscript = 'Doorbird_GetHistory($this->InstanceID)';
+            $timerid = @IPS_GetEventIDByName('Get Doorbird History', $this->InstanceID);
+            if ($timerid === false)
+            {
+                $timerid = $this->RegisterTimer('Get Doorbird History', 3600000, $timerscript);
+            }
+            else
+            {
+                //echo 'Die Ereignis-ID lautet: '. $timerid;
+            }
+            */

            if ($ipsversion == 0) {
                //Skript bei Bewegung
                $IDSnapshot = @($this->GetIDForIdent('GetDoorbirdSnapshot'));
                if ($IDSnapshot === false) {
                    $IDSnapshot = $this->RegisterScript('GetDoorbirdSnapshot', 'Get Doorbird Snapshot', $this->CreateSnapshotScript(), 17);
                    IPS_SetHidden($IDSnapshot, true);
                    $this->SetSnapshotEvent($IDSnapshot);
                } else {
                    $this->SendDebug('Doorbird', 'Doorbird Snapshot Script mit ' . $IDSnapshot . ' gefunden', 0);
                }
            } else {
                if ($this->GetIDForIdent('LastMovement') > 0) {
                    $this->RegisterMessage($this->GetIDForIdent('LastMovement'), VM_UPDATE);
                    $this->SendDebug('Doorbird', 'Register Message LastMovement', 0);
                }
            }

            if ($ipsversion == 0) {
                //Skript beim Klingeln
                $IDRing = @($this->GetIDForIdent('GetDoorbirdRingPic'));
                if ($IDRing === false) {
                    $IDRing = $this->RegisterScript('GetDoorbirdRingPic', 'Get Doorbird Ring Picture', $this->CreateRingPictureScript(), 18);
                    IPS_SetHidden($IDRing, true);
                    $this->SetRingEvent($IDRing);
                } else {
                    $this->SendDebug('Doorbird', 'Doorbird Ring Picture Script mit ' . $IDRing . ' gefunden', 0);
                }
            } else {
                $model = $this->ReadPropertyInteger('model');
                if ($this->GetIDForIdent('LastRingtone') > 0) {
                    $this->RegisterMessage($this->GetIDForIdent('LastRingtone'), VM_UPDATE);
                    $this->SendDebug('Doorbird', 'Register Message LastRingtone', 0);
                }
                if ($model == self::D2102V || $model == self::D1102V || $model == self::D2102FV_EKEY || $model == self::D2102FV || $model == self::D2102KV || $model == self::D2103V) {
                    if ($this->GetIDForIdent('LastRingtone2') > 0) {
                        $this->RegisterMessage($this->GetIDForIdent('LastRingtone2'), VM_UPDATE);
                        $this->SendDebug('Doorbird', 'Register Message LastRingtone2', 0);
                    }
                }
                if ($model == self::D2103V || $model == self::D2104V || $model == self::D2105V || $model == self::D2106V ) {
                    if ($this->GetIDForIdent('LastRingtone3') > 0) {
                        $this->RegisterMessage($this->GetIDForIdent('LastRingtone3'), VM_UPDATE);
                        $this->SendDebug('Doorbird', 'Register Message LastRingtone3', 0);
                    }
                }
                if ($model == self::D2104V || $model == self::D2105V || $model == self::D2106V) {
                    if ($this->GetIDForIdent('LastRingtone4') > 0) {
                        $this->RegisterMessage($this->GetIDForIdent('LastRingtone4'), VM_UPDATE);
                        $this->SendDebug('Doorbird', 'Register Message LastRingtone4', 0);
                    }
                }
                if ($model == self::D2105V || $model == self::D2106V) {
                    if ($this->GetIDForIdent('LastRingtone5') > 0) {
                        $this->RegisterMessage($this->GetIDForIdent('LastRingtone5'), VM_UPDATE);
                        $this->SendDebug('Doorbird', 'Register Message LastRingtone5', 0);
                    }
                }
                if ($model == self::D2106V) {
                    if ($this->GetIDForIdent('LastRingtone6') > 0) {
                        $this->RegisterMessage($this->GetIDForIdent('LastRingtone6'), VM_UPDATE);
                        $this->SendDebug('Doorbird', 'Register Message LastRingtone6', 0);
                    }
                }
            }

            if ($ipsversion >= 1) {
                if ($this->GetIDForIdent('LastDoorOpen') > 0) {
                    $this->RegisterMessage($this->GetIDForIdent('LastDoorOpen'), VM_UPDATE);
                    $this->SendDebug('Doorbird', 'Register Message LastDoorOpen', 0);
                }
            }
            if ($this->CheckAccess()) {
                $this->SetupNotification();
                $this->SendDebug('Doorbird', 'Setup notification', 0);
                $info = $this->GetInfo();
                $this->SendDebug('Doorbird', 'Info: ' . json_encode($info), 0);

                //Email
                $emailalert = $this->ReadPropertyBoolean('activeemail');
                $emailalert2 = $this->ReadPropertyBoolean('activeemail2');
                $emailalert3 = $this->ReadPropertyBoolean('activeemail3');
                $emailalert4 = $this->ReadPropertyBoolean('activeemail4');
                $emailalert5 = $this->ReadPropertyBoolean('activeemail5');
                $emailalert6 = $this->ReadPropertyBoolean('activeemail6');
                $emailalert7 = $this->ReadPropertyBoolean('activeemail7');
                $emailalert8 = $this->ReadPropertyBoolean('activeemail8');
                $emailalert9 = $this->ReadPropertyBoolean('activeemail9');
                $emailalert10 = $this->ReadPropertyBoolean('activeemail10');
                $emailalert11 = $this->ReadPropertyBoolean('activeemail11');
                if ($emailalert) {
                    $email = $this->ReadPropertyString('email');
                    $this->CheckEmail($email);
                } elseif ($emailalert2) {
                    $email = $this->ReadPropertyString('email2');
                    $this->CheckEmail($email);
                } elseif ($emailalert3) {
                    $email = $this->ReadPropertyString('email3');
                    $this->CheckEmail($email);
                } elseif ($emailalert4) {
                    $email = $this->ReadPropertyString('email4');
                    $this->CheckEmail($email);
                } elseif ($emailalert5) {
                    $email = $this->ReadPropertyString('email5');
                    $this->CheckEmail($email);
                } elseif ($emailalert6) {
                    $email = $this->ReadPropertyString('email6');
                    $this->CheckEmail($email);
                } elseif ($emailalert7) {
                    $email = $this->ReadPropertyString('email7');
                    $this->CheckEmail($email);
                } elseif ($emailalert8) {
                    $email = $this->ReadPropertyString('email8');
                    $this->CheckEmail($email);
                } elseif ($emailalert9) {
                    $email = $this->ReadPropertyString('email9');
                    $this->CheckEmail($email);
                } elseif ($emailalert10) {
                    $email = $this->ReadPropertyString('email10');
                    $this->CheckEmail($email);
                } elseif ($emailalert11) {
                    $email = $this->ReadPropertyString('email11');
                    $this->CheckEmail($email);
                } else {
                    $IDEmail = @($this->GetIDForIdent('SendEmailAlert'));
                    if ($ipsversion == 0) {
                        if ($IDEmail > 0) {
                            $this->SetEmailEvent($IDEmail, false);
                        }
                    }
                }
                // Status Aktiv
                $this->SetStatus(IS_ACTIVE);
            } else {
                $this->SetStatus(217); // no access
            }
        }
    }

    private function RegisterHookOLD($WebHook, $TargetID)
    {
        $ids = IPS_GetInstanceListByModuleID('{015A6EB8-D6E5-4B93-B496-0D3F77AE9FE1}');
        if (count($ids) > 0) {
            $hooks = json_decode(IPS_GetProperty($ids[0], 'Hooks'), true);
            $found = false;
            foreach ($hooks as $index => $hook) {
                if ($hook['Hook'] == $WebHook) {
                    if ($hook['TargetID'] == $TargetID) {
                        return;
                    }
                    $hooks[$index]['TargetID'] = $TargetID;
                    $found = true;
                }
            }
            if (!$found) {
                $hooks[] = ['Hook' => $WebHook, 'TargetID' => $TargetID];
            }
            IPS_SetProperty($ids[0], 'Hooks', json_encode($hooks));
            IPS_ApplyChanges($ids[0]);
        }
    }

    private function RegisterHook($WebHook)
    {
        $ids = IPS_GetInstanceListByModuleID('{015A6EB8-D6E5-4B93-B496-0D3F77AE9FE1}');
        if (count($ids) > 0) {
            $hooks = json_decode(IPS_GetProperty($ids[0], 'Hooks'), true);
            $found = false;
            foreach ($hooks as $index => $hook) {
                if ($hook['Hook'] == $WebHook) {
                    if ($hook['TargetID'] == $this->InstanceID) {
                        return;
                    }
                    $hooks[$index]['TargetID'] = $this->InstanceID;
                    $found = true;
                }
            }
            if (!$found) {
                $hooks[] = ['Hook' => $WebHook, 'TargetID' => $this->InstanceID];
            }
            IPS_SetProperty($ids[0], 'Hooks', json_encode($hooks));
            IPS_ApplyChanges($ids[0]);
        }
    }

    private function CreateWebHookScript()
    {
        return '<?
//Do not delete or modify.
Doorbird_ProcessHookDataOLD(' . $this->InstanceID . ');		
?>';
    }

    private function CreateSnapshotScript()
    {
        return '<?
//Do not delete or modify.
Doorbird_GetSnapshot(' . $this->InstanceID . ');		
?>';
    }

    private function CreateRingPictureScript()
    {
        return '<?
//Do not delete or modify.
Doorbird_GetRingPicture(' . $this->InstanceID . ');		
?>';
    }

    private function CreateEmailAlertScript($email)
    {
        return '<?
//Do not delete or modify.
Doorbird_EmailAlert(' . $this->InstanceID . ', ' . $email . ');		
?>';
    }

    private function SetSnapshotEvent(int $IDSnapshot)
    {
        //prüfen ob Event existent
        $ParentID = $IDSnapshot;

        $EreignisID = @($this->GetIDForIdent('EventGetDoorbirdSnapshot'));
        if ($EreignisID === false) {
            $EreignisID = IPS_CreateEvent(0);
            IPS_SetName($EreignisID, 'GetDoorbirdSnapshot');
            IPS_SetIdent($EreignisID, 'EventGetDoorbirdSnapshot');
            IPS_SetEventTrigger($EreignisID, 0, $this->GetIDForIdent('LastMovement'));   //bei Variablenaktualisierung
            IPS_SetParent($EreignisID, $ParentID);
            IPS_SetEventActive($EreignisID, true);             //Ereignis aktivieren
        } else {
            $this->SendDebug('Doorbird', 'Event für Snapshot mit ObjektID' . $EreignisID . ' gefunden', 0);
        }
    }

    private function SetRingEvent(int $IDRing)
    {
        //prüfen ob Event existent
        $ParentID = $IDRing;

        $EreignisID = @($this->GetIDForIdent('EventGetDoorbirdRingPic'));
        if ($EreignisID === false) {
            $EreignisID = IPS_CreateEvent(0);
            IPS_SetName($EreignisID, 'GetDoorbirdRingPic');
            IPS_SetIdent($EreignisID, 'EventGetDoorbirdRingPic');
            IPS_SetEventTrigger($EreignisID, 0, $this->GetIDForIdent('LastRingtone'));   //bei Variablenaktualisierung
            IPS_SetParent($EreignisID, $ParentID);
            IPS_SetEventActive($EreignisID, true);             //Ereignis aktivieren
        } else {
            $this->SendDebug('Doorbird', 'Event für Doorbird Ringpicture mit ObjektID' . $EreignisID . ' gefunden', 0);
        }
    }

    private function SetEmailEvent(int $IDEmail, bool $state)
    {
        //prüfen ob Event existent
        $ParentID = $IDEmail;

        //$EreignisID = @($this->GetIDForIdent('EventDoorbirdEmail'));
        $EreignisID = @IPS_GetObjectIDByIdent('EventDoorbirdEmail', $ParentID);
        if ($EreignisID === false) {
            $EreignisID = IPS_CreateEvent(0);
            IPS_SetName($EreignisID, 'Doorbird Email Alert');
            IPS_SetIdent($EreignisID, 'EventDoorbirdEmail');
            IPS_SetEventTrigger($EreignisID, 0, $this->GetIDForIdent('LastRingtone'));   //bei Variablenaktualisierung
            IPS_SetParent($EreignisID, $ParentID);
            IPS_SetEventActive($EreignisID, $state);             //Ereignis aktivieren	/ deaktivieren
        } else {
            //echo 'Die Ereignis-ID lautet: '. $EreignisID;
            IPS_SetEventActive($EreignisID, $state);             //Ereignis aktivieren	/ deaktivieren
        }
    }

    private function IsCompressionAllowed($mimeType)
    {
        return in_array($mimeType, [
            'text/plain',
            'text/html',
            'text/xml',
            'text/css',
            'text/javascript',
            'application/xml',
            'application/xhtml+xml',
            'application/rss+xml',
            'application/json',
            'application/json; charset=utf-8',
            'application/javascript',
            'application/x-javascript',
            'image/svg+xml'
        ]);
    }

    private function GetMimeType($extension)
    {
        $lines = file(IPS_GetKernelDirEx() . 'mime.types');
        foreach ($lines as $line) {
            $type = explode("\t", $line, 2);
            if (count($type) == 2) {
                $types = explode(' ', trim($type[1]));
                foreach ($types as $ext) {
                    if ($ext == $extension) {
                        return $type[0];
                    }
                }
            }
        }
        return 'text/plain';
    }

    private function GetEventValue()
    {
        return '&value=' . $this->GetWebhookURL(true) . '?doorbirdevent=';
    }

    private function GetFavoritURL($secure, $event)
    {
        return $this->GetWebhookURL($secure) . '?doorbirdevent=' . $event;
    }

    private function GetWebhookURL($secure)
    {
        $hostips = $this->ReadPropertyString('IPSIP');
        $portips = $this->ReadPropertyInteger('PortIPS');
        $webhookusername = $this->ReadPropertyString('webhookusername');
        $webhookpassword = $this->ReadPropertyString('webhookpassword');
        $prefixips = $this->GetURLPrefix($hostips);
        if ($secure) {
            $url = $prefixips . $webhookusername . ':' . $webhookpassword . '@' . $hostips . ':' . $portips . '/hook/doorbird' . $this->InstanceID;
        } else {
            $url = $prefixips . $hostips . ':' . $portips . '/hook/doorbird' . $this->InstanceID;
        }

        return $url;
    }

    private function GetDoorbirdURL()
    {
        $hostdoorbird = $this->ReadPropertyString('Host');
        $portdoorbell = $this->ReadPropertyInteger('PortDoorbell');
        $prefixdoorbird = $this->GetURLPrefix($hostdoorbird);
        return $prefixdoorbird . $hostdoorbird . ':' . $portdoorbell;
    }

    private function SetRingPicture($ring_category)
    {
        $name = 'Doorbird Klingel';
        $picturelimit = $this->ReadPropertyInteger('picturelimitring');
        $catid = $this->ReadPropertyInteger('categoryhistory');
        if ($catid > 0) {
            $model = $this->ReadPropertyInteger('model');
            if ($model == self::D101 || $model == self::D101S || $model == self::D202 || $model == self::D1101V || $model == self::D2101V || $model == self::D21DKV || $model == self::D21DKH || $model == self::D1101UV
                || $model == self::D2101FPBK || $model == self::D2101FPBI || $model == self::D2101IKH || $model == self::D2101IKH || $model == self::D2101KH || $model == self::D2101KH || $model == self::D1101KH
                || $model == self::D2101KV || $model == self::D2101FV || $model == self::D2101FV_EKEY || $model == self::D2100E || $model == self::D1100E) {
                $ring_category_1 = $this->CreateRingCategory(1);
                $this->WriteAttributeInteger('pictures_history', $ring_category_1);
            }
            if ($model == self::D2102V || $model == self::D1102V || $model == self::D2102FV_EKEY || $model == self::D2102FV || $model == self::D2102KV || $model == self::D2103V || $model == self::D2104V || $model == self::D2105V || $model == self::D2106V) {
                $ring_category_1 = $this->CreateRingCategory(1);
                $this->WriteAttributeInteger('pictures_history', $ring_category_1);
                $ring_category_2 = $this->CreateRingCategory(2);
                $this->WriteAttributeInteger('pictures_history2', $ring_category_2);
            }
            if ($model == self::D2103V || $model == self::D2104V || $model == self::D2105V || $model == self::D2106V) {
                $ring_category_3 = $this->CreateRingCategory(3);
                $this->WriteAttributeInteger('pictures_history3', $ring_category_3);
            }
            if ($model == self::D2104V || $model == self::D2105V || $model == self::D2106V) {
                $ring_category_4 = $this->CreateRingCategory(4);
                $this->WriteAttributeInteger('pictures_history4', $ring_category_4);
            }
            if ($model == self::D2105V || $model == self::D2106V) {
                $ring_category_5 = $this->CreateRingCategory(5);
                $this->WriteAttributeInteger('pictures_history5', $ring_category_5);
            }
            if ($model == self::D2106V) {
                $ring_category_6 = $this->CreateRingCategory(6);
                $this->WriteAttributeInteger('pictures_history6', $ring_category_6);
            }
            if ($ring_category == 1) {
                $ident = 'DoorbirdRing1Pic';
                $picturename = 'doorbirdring1pic_';
                $this->GetImageDoorbell($name, $ident, $picturename, $picturelimit, $ring_category_1);
            }
            if ($ring_category == 2) {
                $ident = 'DoorbirdRing2Pic';
                $picturename = 'doorbirdring2pic_';
                $this->GetImageDoorbell($name, $ident, $picturename, $picturelimit, $ring_category_2);
            }
            if ($ring_category == 3) {
                $ident = 'DoorbirdRing3Pic';
                $picturename = 'doorbirdring3pic_';
                $this->GetImageDoorbell($name, $ident, $picturename, $picturelimit, $ring_category_3);
            }
            if ($ring_category == 4) {
                $ident = 'DoorbirdRing4Pic';
                $picturename = 'doorbirdring4pic_';
                $this->GetImageDoorbell($name, $ident, $picturename, $picturelimit, $ring_category_4);
            }
            if ($ring_category == 5) {
                $ident = 'DoorbirdRing5Pic';
                $picturename = 'doorbirdring5pic_';
                $this->GetImageDoorbell($name, $ident, $picturename, $picturelimit, $ring_category_5);
            }
            if ($ring_category == 6) {
                $ident = 'DoorbirdRing6Pic';
                $picturename = 'doorbirdring6pic_';
                $this->GetImageDoorbell($name, $ident, $picturename, $picturelimit, $ring_category_6);
            }
        } else {
            $this->SendDebug('Doorbird', 'No category is set, please set category.', 0);
            $this->LogMessage('Es wurde keine Kategorie gesetzt. Die Funktion wurde nicht ausgeführt.', KL_DEBUG);
            echo 'Es wurde keine Kategorie gesetzt. Die Funktion wurde nicht ausgeführt.';
        }
    }

    private function GetImageDoorbell($name, $ident, $picturename, $picturelimit, $catid)
    {
        $URL = self::GET_IMAGE;
        $Content = $this->SendDoorbird($URL);
        //lastsnapshot bestimmen
        $mediaids = IPS_GetChildrenIDs($catid);
        $countmedia = count($mediaids);
        $lastsnapshot = $countmedia;
        if ($lastsnapshot == $picturelimit) {
            //neu beschreiben und Bilder um +1 neu zuordnen
            //Images base 64 codiert in allmedia einlesen

            $allmedia = $this->GetallImages($mediaids);
            if ($allmedia) {
                $lastmediaid = array_search($picturelimit, array_column($allmedia, 'picid'));
                unset($allmedia[$lastmediaid]);
                //Neues Bild zu allmedia hinzufügen
                $allmedia = $this->AddCurrentPic($allmedia, $mediaids, $Content);
                //allmedia schreiben
                $this->SaveImagestoPicSlot($allmedia, $ident, $name, $catid);
            } else {
                $this->SendDebug('Doorbird', 'No media image found', 0);
            }
        } else {
            // neues Mediaobjekt anlegen
            //testen ob im Medienpool existent
            $currentsnapshotid = $lastsnapshot + 1;
            $MediaID = @IPS_GetObjectIDByIdent($ident . $currentsnapshotid, $catid);
            if ($MediaID === false) {
                $MediaID = IPS_CreateMedia(1);                  // Image im MedienPool anlegen
                IPS_SetParent($MediaID, $catid); // Medienobjekt einsortieren unter der Doorbird Kategorie
                IPS_SetIdent($MediaID, $ident . $currentsnapshotid);
                IPS_SetPosition($MediaID, $currentsnapshotid);
                IPS_SetMediaCached($MediaID, true);
                // Das Cachen für das Mediaobjekt wird aktiviert.
                // Beim ersten Zugriff wird dieses von der Festplatte ausgelesen
                // und zukünftig nur noch im Arbeitsspeicher verarbeitet.
                $ImageFile = IPS_GetKernelDir() . 'media' . DIRECTORY_SEPARATOR . $picturename . $currentsnapshotid . '.jpg';  // Image-Datei
                IPS_SetMediaFile($MediaID, $ImageFile, false);    // Image im MedienPool mit Image-Datei verbinden

                if ($currentsnapshotid == 1) {
                    //Auf Position 1 anlegen und beschreiben
                    $savetime = date('d.m.Y H:i:s');
                    IPS_SetName($MediaID, $name . ' ' . $currentsnapshotid . ' ' . $savetime); // Medienobjekt benennen
                    IPS_SetInfo($MediaID, $savetime);
                    IPS_SetMediaContent($MediaID, base64_encode($Content));  //Bild Base64 codieren und ablegen
                    IPS_SendMediaEvent($MediaID); //aktualisieren
                } else {
                    //Array auslesen und Bilder +1 neu zuordnen
                    //Images base 64 codiert in allmedia einlesen
                    $allmedia = $this->GetallImages($mediaids);
                    if ($allmedia) {
                        //Neues Bild zu allmedia hinzufügen
                        $allmedia = $this->AddCurrentPic($allmedia, $mediaids, $Content);
                        //allmedia schreiben
                        $this->SaveImagestoPicSlot($allmedia, $ident, $name, $catid);
                    } else {
                        $this->SendDebug('Doorbird', 'No media image found', 0);
                    }
                }
            }
        }
    }

    private function GetallImages($mediaids)
    {
        $countmedia = count($mediaids);
        if ($countmedia > 0) {
            $allmedia = [];
            for ($i = 0; $i <= ($countmedia - 1); $i++) {
                $mediakey = IPS_GetObject($mediaids[$i])['ObjectIdent'];
                $mediakey = explode('Pic', $mediakey);
                $mediakey = intval($mediakey[1]);
                //$name = IPS_GetName($mediaids[$i]);
                //$name = explode(' ', $name);
                //$savedate = $name[3];
                //$savetime = $name[4];
                //$saveinfo =  $savedate.' '.$savetime;
                $saveinfo = IPS_GetObject($mediaids[$i])['ObjectInfo'];
                $allmedia[$i]['objid'] = $mediaids[$i];
                $allmedia[$i]['picid'] = $mediakey;
                $allmedia[$i]['saveinfo'] = $saveinfo;
                $allmedia[$i]['imagebase64'] = IPS_GetMediaContent($mediaids[$i]); //base64 codiert
            }
        } else {
            $allmedia = false;
        }

        return $allmedia;
    }

    private function SaveImagestoPicSlot($allmedia, $ident, $name, $catid)
    {
        foreach ($allmedia as $media) {
            $picid = $media['picid'];
            $newpicid = $picid + 1;
            $mediaid = @IPS_GetObjectIDByIdent($ident . $newpicid, $catid);
            if ($mediaid) {
                $saveinfo = $media['saveinfo'];
                $imagebase64 = $media['imagebase64'];
                IPS_SetMediaContent($mediaid, $imagebase64);  //Bild Base64 codiert ablegen
                IPS_SetName($mediaid, $name . ' ' . $newpicid . ' ' . $saveinfo); // Medienobjekt benennen
                IPS_SetInfo($mediaid, $saveinfo);
                IPS_SendMediaEvent($mediaid); //aktualisieren
            } else {
                $this->SendDebug('Doorbird', 'No picture with ident ' . $ident . $newpicid . ' found', 0);
            }
        }
    }

    private function AddCurrentPic($allmedia, $mediaids, $Content)
    {
        $lastid = count($allmedia);

        // Neues Bild ergänzen
        $allmedia[$lastid]['objid'] = $mediaids[0];
        $allmedia[$lastid]['picid'] = 0;
        $saveinfo = date('d.m.Y H:i:s');
        $allmedia[$lastid]['saveinfo'] = $saveinfo;
        $allmedia[$lastid]['imagebase64'] = base64_encode($Content);  //Bild Base64 codieren und ablegen;
        return $allmedia;
    }

    private function Get_SIPListConfiguration($sip)
    {
        $form = [];
        if (empty($sip)) {
            $this->SendDebug('SIP', 'No SIP data found', 0);
        } else {
            foreach ($sip as $key => $sipclient) {
                $form[] = [
                    'ID'     => $key,
                    'Title'  => $sipclient['title'],
                    'Value'  => $sipclient['value'], ];
            }
        }
        return $form;
    }

    private function Get_HTTPListConfiguration($http)
    {
        $form = [];
        if (empty($http)) {
            $this->SendDebug('HTTP', 'No HTTP Favorites found', 0);
        } else {
            foreach ($http as $key => $http_call) {
                $form[] = [
                    'ID'     => $key,
                    'Title'  => $http_call['title'],
                    'Value'  => $http_call['value'], ];
            }
        }
        return $form;
    }

    private function Get_ScheduleListConfiguration($schedule_data)
    {
        $form = [];
        $from = 0;
        $to = 0;
        if (empty($schedule_data)) {
            $this->SendDebug('Schedule', 'No Schedule found', 0);
        } else {
            foreach ($schedule_data as $key => $entry) {
                $input = $entry->input;
                $inputparam = $entry->param;
                $output = $entry->output;
                foreach ($output as $outputentry) {
                    $event = $outputentry->event;
                    $param = $outputentry->param;
                    //$enabled = $outputentry->enabled;
                    $schedule = $outputentry->schedule;
                    foreach ($schedule as $schedule_type => $schedule_entry) {
                        if ($schedule_type == 'weekdays') {
                            $from = $schedule_entry[0]->from;
                            $to = $schedule_entry[0]->to;
                        }
                    }
                }
                $form[] = [
                    'id'    => $key + 1,
                    'ident' => $key,
                    'input' => $this->Translate($input),
                ];
                $form[] = [
                    'id'                 => $key + 100,
                    'parent'             => $key + 1,
                    'ident'              => $key,
                    'input'              => $this->Translate($input),
                    'inputparam'         => $inputparam,
                    'outputevent'        => $event,
                    'outputparam'        => $param,
                    'schedule_type'      => $this->Translate($schedule_type),
                    'schedule_interval'  => $from . ' - ' . $to, ];
            }
        }
        return $form;
    }
}
